{"file_contents":{"replit.md":{"content":"# Overview\n\nZeroWasteRescue (FoodBridge) is a food waste reduction platform that connects food providers (hotels, restaurants, hostels, catering services) with NGOs to reduce food waste and help communities. The platform enables providers to register surplus food donations and NGOs to find and claim available food listings, facilitating direct communication through an integrated chat system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with route-based code splitting\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system supporting light/dark modes\n- **State Management**: TanStack Query for server state and React hooks for local state\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Authentication**: Session-based authentication using express-session with bcrypt password hashing\n- **API Design**: RESTful API with consistent error handling and logging middleware\n- **File Structure**: Modular architecture with separate routes, storage layer, and database configuration\n- **Authorization**: Role-based access control (Provider, NGO, Admin) with verification requirements for NGOs\n\n## Database Design\n- **ORM**: Drizzle ORM with PostgreSQL\n- **Schema**: Relational database with three main entities:\n  - Users (providers, NGOs, admins) with verification status\n  - Food listings with claim status and urgency levels\n  - Messages for chat functionality between users\n- **Enums**: Type-safe enums for user types, urgency levels, and claim statuses\n- **Relationships**: Foreign key relationships with proper cascade handling\n\n## Key Features\n- **Multi-role Authentication**: Separate login flows for providers and NGOs with admin verification\n- **Food Listing Management**: CRUD operations with filtering by location, urgency, and food type\n- **Real-time Communication**: Chat interface for coordination between providers and NGOs\n- **Admin Panel**: NGO verification system with approval/rejection workflows\n- **Responsive Design**: Mobile-first approach with consistent component design\n\n## Design System\n- **Color Palette**: Sustainable green theme with proper contrast ratios for accessibility\n- **Typography**: Inter font family for optimal readability\n- **Component Library**: Comprehensive UI components with consistent spacing and interaction patterns\n- **Theme Support**: Light and dark mode with CSS custom properties\n\n# External Dependencies\n\n## Database\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Drizzle Kit**: Database migration and schema management tools\n\n## UI Framework\n- **Radix UI**: Headless UI components for accessibility and consistent behavior\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **Lucide React**: Icon library for consistent iconography\n\n## Authentication & Security\n- **bcrypt**: Password hashing for secure authentication\n- **express-session**: Session management with PostgreSQL store\n- **connect-pg-simple**: PostgreSQL session store adapter\n\n## Development Tools\n- **Vite**: Fast development server and build tool with React plugin\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TanStack Query**: Data fetching and caching with optimistic updates\n\n## Validation & Forms\n- **Zod**: Schema validation for API endpoints and form data\n- **React Hook Form**: Performance-optimized form handling with validation\n- **@hookform/resolvers**: Integration between React Hook Form and Zod\n\n## Communication\n- **Real-time Features**: Planned WebSocket integration for live chat functionality\n- **API Communication**: Fetch-based API client with credential handling and error management","size_bytes":4025},"ZeroWasteRescue/design_guidelines.md":{"content":"# Food Waste Reduction Platform - Design Guidelines\n\n## Design Approach\n**Selected Approach**: Reference-Based Design inspired by social impact platforms like DonorsChoose and charitable marketplace interfaces, emphasizing trust, simplicity, and social good. The design prioritizes utility and clarity over visual complexity to ensure accessibility for diverse user groups including hotel staff and NGO volunteers.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors (Dark Mode)**: \n- Background: 215 25% 8% (dark slate)\n- Surface: 215 20% 12% (elevated surfaces)\n- Primary: 142 45% 55% (sustainable green)\n- Text: 0 0% 95% (near white)\n\n**Primary Colors (Light Mode)**:\n- Background: 0 0% 98% (warm white)\n- Surface: 0 0% 100% (pure white)\n- Primary: 142 55% 45% (deeper green)\n- Text: 215 15% 15% (dark gray)\n\n**Accent Colors**: \n- Warning/Urgent: 25 85% 55% (amber for time-sensitive listings)\n- Success: 142 65% 45% (confirmation states)\n\n### Typography\n- **Primary Font**: Inter (Google Fonts) - excellent readability for forms and data\n- **Headings**: 600-700 weight, larger scale for section headers\n- **Body**: 400-500 weight, optimized for reading food descriptions\n- **Labels**: 500 weight, clear form field identification\n\n### Layout System\n**Spacing Units**: Tailwind units of 2, 4, 6, and 8 for consistent rhythm\n- p-4 for card padding\n- m-6 for section spacing  \n- gap-4 for grid layouts\n- h-8 for input heights\n\n### Component Library\n\n**Navigation**: \n- Simple top navigation with user type indicator (Provider/NGO)\n- Breadcrumb navigation for multi-step forms\n- Mobile-first responsive hamburger menu\n\n**Cards**:\n- Food listing cards with location, quantity, and urgency indicators\n- User profile cards for provider/NGO verification\n- Chat message bubbles with timestamp and read status\n\n**Forms**:\n- Multi-step food registration form with progress indicator\n- User registration with role selection (Provider/NGO)\n- Search and filter forms for NGO food discovery\n\n**Data Display**:\n- List view for food waste listings with sort/filter options\n- Map integration placeholder for location-based discovery\n- Dashboard metrics for registered food quantities\n\n**Interactive Elements**:\n- Chat interface with message history\n- Real-time availability toggles\n- Contact/claim buttons with loading states\n\n## Key Design Principles\n\n1. **Trust & Transparency**: Clear provider verification badges, transparent food details\n2. **Accessibility First**: High contrast ratios, clear labels, simple navigation\n3. **Mobile Responsive**: Touch-friendly buttons, readable text on small screens\n4. **Minimal Cognitive Load**: Single-purpose pages, clear call-to-actions\n5. **Social Impact Focus**: Emphasize environmental benefit and community connection\n\n## Images\n- **Hero Image**: Medium-sized banner (not full viewport) showing diverse people sharing food, positioned on homepage\n- **Food Listing Photos**: Small thumbnails for each food waste listing\n- **Verification Badges**: Simple icon graphics for verified providers and NGOs\n- **Empty States**: Friendly illustrations for no listings found or empty chat\n\n## Animations\nMinimal use only for:\n- Loading states on form submissions\n- Smooth transitions between chat messages\n- Subtle hover effects on interactive cards\n\nThis design emphasizes functionality and social impact over visual complexity, ensuring the platform serves its humanitarian purpose effectively while maintaining professional credibility.","size_bytes":3470},"ZeroWasteRescue/drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"ZeroWasteRescue/postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"ZeroWasteRescue/tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"ZeroWasteRescue/vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5173,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1008},"ZeroWasteRescue/server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Simple database connection without SSL complications\nconst connectionString = process.env.DATABASE_URL.replace('?sslmode=disable', '');\nexport const sql = postgres(connectionString, {\n  ssl: false,\n  max: 1,\n});\nexport const db = drizzle(sql, { schema });\n","size_bytes":519},"ZeroWasteRescue/server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2090},"ZeroWasteRescue/server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertFoodListingSchema, insertMessageSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\n\n// Simple session-based auth middleware\nconst requireAuth = (req: any, res: any, next: any) => {\n  if (!req.session?.userId) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  next();\n};\n\n// Admin middleware\nconst requireAdmin = async (req: any, res: any, next: any) => {\n  if (!req.session?.userId) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  if (!user || !user.isAdmin) {\n    return res.status(403).json({ error: \"Admin access required\" });\n  }\n  \n  next();\n};\n\n// Verified NGO middleware\nconst requireVerifiedNgo = async (req: any, res: any, next: any) => {\n  if (!req.session?.userId) {\n    return res.status(401).json({ error: \"Authentication required\" });\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  if (!user || user.userType !== 'ngo') {\n    return res.status(403).json({ error: \"NGO access required\" });\n  }\n  \n  if (!user.isVerified) {\n    return res.status(403).json({ error: \"NGO verification required. Please wait for admin approval.\" });\n  }\n  \n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configure session middleware\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      secure: false, // set to true in production with HTTPS\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      // Check if this email should be admin (from environment variable)\n      const adminEmails = process.env.ADMIN_EMAILS?.split(',').map(email => email.trim()) || [];\n      const isAdmin = adminEmails.includes(userData.email);\n      \n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n        ...(isAdmin && { isAdmin })\n      });\n      \n      // Set session\n      (req as any).session.userId = user.id;\n      (req as any).session.userType = user.userType;\n      \n      // Return user without password\n      const { password, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      // Find user\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Check password\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Set session\n      (req as any).session.userId = user.id;\n      (req as any).session.userType = user.userType;\n      \n      // Return user without password\n      const { password: _, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    (req as any).session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: \"Could not log out\" });\n      }\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser((req as any).session.userId);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      const { password, ...userResponse } = user;\n      res.json({ user: userResponse });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/ngos\", requireAdmin, async (req, res) => {\n    try {\n      const { status } = req.query;\n      const ngos = await storage.getNgosByStatus(status as string);\n      // Remove password from response for security\n      const sanitizedNgos = ngos.map(({ password, ...ngo }) => ngo);\n      res.json(sanitizedNgos);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/ngos/:id/verify\", requireAdmin, async (req, res) => {\n    try {\n      const ngoId = req.params.id;\n      const ngo = await storage.verifyNgo(ngoId);\n      if (!ngo) {\n        return res.status(404).json({ error: \"NGO not found\" });\n      }\n      // Remove password from response for security\n      const { password, ...sanitizedNgo } = ngo;\n      res.json({ message: \"NGO verified successfully\", ngo: sanitizedNgo });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/admin/ngos/:id/reject\", requireAdmin, async (req, res) => {\n    try {\n      const ngoId = req.params.id;\n      const success = await storage.rejectNgo(ngoId);\n      if (!success) {\n        return res.status(404).json({ error: \"NGO not found\" });\n      }\n      res.json({ message: \"NGO verification rejected\" });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Food listing routes\n  app.get(\"/api/food-listings\", async (req, res) => {\n    try {\n      const { location, urgency, foodType, providerId } = req.query;\n      const listings = await storage.getFoodListings({\n        location: location as string,\n        urgency: urgency as string,\n        foodType: foodType as string,\n        providerId: providerId as string\n      });\n      res.json(listings);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/food-listings/:id\", async (req, res) => {\n    try {\n      const listing = await storage.getFoodListing(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ error: \"Listing not found\" });\n      }\n      res.json(listing);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/food-listings\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.userType !== 'provider') {\n        return res.status(403).json({ error: \"Only providers can create listings\" });\n      }\n      \n      const listingData = insertFoodListingSchema.parse({\n        ...req.body,\n        providerId: userId\n      });\n      \n      const listing = await storage.createFoodListing(listingData);\n      res.json(listing);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/food-listings/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const listing = await storage.getFoodListing(req.params.id);\n      \n      if (!listing || listing.providerId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to update this listing\" });\n      }\n      \n      const updates = insertFoodListingSchema.partial().parse(req.body);\n      const updatedListing = await storage.updateFoodListing(req.params.id, updates);\n      \n      res.json(updatedListing);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/food-listings/:id\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const listing = await storage.getFoodListing(req.params.id);\n      \n      if (!listing || listing.providerId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to delete this listing\" });\n      }\n      \n      const deleted = await storage.deleteFoodListing(req.params.id);\n      res.json({ success: deleted });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Claim routes\n  app.post(\"/api/food-listings/:id/claim\", requireVerifiedNgo, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const listingId = req.params.id;\n      \n      const listing = await storage.claimFoodListing(listingId, userId);\n      if (!listing) {\n        return res.status(400).json({ error: \"Unable to claim listing. It may already be claimed or not exist.\" });\n      }\n      \n      res.json({ message: \"Listing claimed successfully\", listing });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/food-listings/:id/unclaim\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const listingId = req.params.id;\n      const user = await storage.getUser(userId);\n      \n      // Check if user is admin or the NGO who claimed it\n      const listing = await storage.getFoodListing(listingId);\n      if (!listing) {\n        return res.status(404).json({ error: \"Listing not found\" });\n      }\n      \n      if (!user?.isAdmin && listing.claimedByNgoId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to unclaim this listing\" });\n      }\n      \n      const unclaimedListing = await storage.unclaimFoodListing(listingId);\n      res.json({ message: \"Listing unclaimed successfully\", listing: unclaimedListing });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Status update route for claimed listings\n  app.patch(\"/api/food-listings/:id/status\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const listingId = req.params.id;\n      const { claimStatus } = req.body;\n      \n      // Define valid status transitions\n      const statusTransitions: Record<string, string[]> = {\n        'claimed': ['confirmed', 'cancelled'],\n        'confirmed': ['in_process', 'cancelled'],\n        'in_process': ['delivery_partner_assigned', 'in_transit', 'cancelled'],\n        'delivery_partner_assigned': ['in_transit', 'cancelled'],\n        'in_transit': ['completed'],\n        'completed': [], // Terminal state\n        'cancelled': []  // Terminal state\n      };\n      \n      // Get the listing to check authorization and current status\n      const listing = await storage.getFoodListing(listingId);\n      if (!listing) {\n        return res.status(404).json({ error: \"Listing not found\" });\n      }\n      \n      // Only the NGO who claimed it can update status (or admin)\n      const user = await storage.getUser(userId);\n      if (!user?.isAdmin && listing.claimedByNgoId !== userId) {\n        return res.status(403).json({ error: \"Not authorized to update status for this listing\" });\n      }\n      \n      // Validate status transition\n      const currentStatus = listing.claimStatus || 'open';\n      const allowedNextStatuses = statusTransitions[currentStatus] || [];\n      \n      if (!allowedNextStatuses.includes(claimStatus)) {\n        return res.status(400).json({ \n          error: `Invalid status transition from '${currentStatus}' to '${claimStatus}'. Allowed transitions: ${allowedNextStatuses.join(', ')}` \n        });\n      }\n      \n      // Update the status\n      const updatedListing = await storage.updateFoodListingStatus(listingId, claimStatus);\n      if (!updatedListing) {\n        return res.status(400).json({ error: \"Unable to update listing status\" });\n      }\n      \n      res.json({ message: \"Status updated successfully\", listing: updatedListing });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Message routes\n  app.get(\"/api/messages/:listingId\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const listingId = req.params.listingId;\n      const otherUserId = req.query.otherUserId as string;\n      \n      if (!otherUserId) {\n        return res.status(400).json({ error: \"otherUserId parameter is required\" });\n      }\n      \n      // Get the listing to check authorization\n      const listing = await storage.getFoodListing(listingId);\n      if (!listing) {\n        return res.status(404).json({ error: \"Listing not found\" });\n      }\n      \n      // Check if current user is authorized to access this conversation\n      const isProvider = listing.providerId === userId;\n      const isClaimedNgo = listing.claimedByNgoId === userId;\n      \n      // Additional check: see if user has existing messages in this conversation\n      const userMessages = await storage.getUserMessagesForListing(listingId, userId);\n      const hasExistingMessages = userMessages.length > 0;\n      \n      if (!isProvider && !isClaimedNgo && !hasExistingMessages) {\n        return res.status(403).json({ error: \"Not authorized to access this conversation\" });\n      }\n      \n      // Get messages only between the current user and the specified other user\n      const messages = await storage.getConversationMessages(listingId, userId, otherUserId);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/messages\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const messageData = insertMessageSchema.parse({\n        ...req.body,\n        senderId: userId\n      });\n      \n      // Get the listing to validate authorization\n      const listing = await storage.getFoodListing(messageData.listingId);\n      if (!listing) {\n        return res.status(404).json({ error: \"Listing not found\" });\n      }\n      \n      // Validate that sender and receiver are legitimate participants\n      const validParticipants = [listing.providerId];\n      if (listing.claimedByNgoId) {\n        validParticipants.push(listing.claimedByNgoId);\n      }\n      \n      // Check if sender is authorized\n      if (!validParticipants.includes(userId)) {\n        return res.status(403).json({ error: \"Not authorized to send messages for this listing\" });\n      }\n      \n      // Check if receiver is authorized\n      if (!validParticipants.includes(messageData.receiverId)) {\n        return res.status(403).json({ error: \"Receiver is not a valid participant for this listing\" });\n      }\n      \n      // Ensure sender and receiver are different\n      if (messageData.senderId === messageData.receiverId) {\n        return res.status(400).json({ error: \"Cannot send message to yourself\" });\n      }\n      \n      const message = await storage.createMessage(messageData);\n      res.json(message);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/conversations\", requireAuth, async (req, res) => {\n    try {\n      const userId = (req as any).session.userId;\n      const conversations = await storage.getConversations(userId);\n      res.json(conversations);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15786},"ZeroWasteRescue/server/storage.ts":{"content":"import { users, foodListings, messages, type User, type InsertUser, type FoodListing, type InsertFoodListing, type Message, type InsertMessage } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or } from \"drizzle-orm\";\n\n// Storage interface with all CRUD methods needed\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Admin methods\n  getNgosByStatus(status?: string): Promise<User[]>;\n  verifyNgo(id: string): Promise<User | undefined>;\n  rejectNgo(id: string): Promise<boolean>;\n  \n  // Food listing methods\n  getFoodListings(filters?: { location?: string; urgency?: string; foodType?: string; providerId?: string }): Promise<FoodListing[]>;\n  getFoodListing(id: string): Promise<FoodListing | undefined>;\n  createFoodListing(listing: InsertFoodListing): Promise<FoodListing>;\n  updateFoodListing(id: string, updates: Partial<InsertFoodListing>): Promise<FoodListing | undefined>;\n  updateFoodListingStatus(id: string, status: string): Promise<FoodListing | undefined>;\n  deleteFoodListing(id: string): Promise<boolean>;\n  claimFoodListing(id: string, ngoId: string): Promise<FoodListing | undefined>;\n  unclaimFoodListing(id: string): Promise<FoodListing | undefined>;\n  \n  // Message methods\n  getMessages(listingId: string): Promise<Message[]>;\n  getUserMessagesForListing(listingId: string, userId: string): Promise<Message[]>;\n  getConversationMessages(listingId: string, user1Id: string, user2Id: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  getConversations(userId: string): Promise<{ listing: FoodListing; lastMessage: Message }[]>;\n}\n\n// Database storage implementation using javascript_database blueprint\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Admin methods\n  async getNgosByStatus(status?: string): Promise<User[]> {\n    let whereConditions = [eq(users.userType, 'ngo')];\n    \n    if (status === 'pending') {\n      whereConditions.push(eq(users.isVerified, false));\n    } else if (status === 'verified') {\n      whereConditions.push(eq(users.isVerified, true));\n    }\n    \n    return db.select()\n      .from(users)\n      .where(and(...whereConditions))\n      .orderBy(desc(users.createdAt));\n  }\n\n  async verifyNgo(id: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        isVerified: true, \n        verifiedAt: new Date() \n      })\n      .where(and(eq(users.id, id), eq(users.userType, 'ngo')))\n      .returning();\n    return user || undefined;\n  }\n\n  async rejectNgo(id: string): Promise<boolean> {\n    // For now, rejection just removes the user. In a real app, \n    // you might want to keep a record with rejection reason\n    const result = await db\n      .delete(users)\n      .where(and(eq(users.id, id), eq(users.userType, 'ngo'), eq(users.isVerified, false)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Food listing methods\n  async getFoodListings(filters?: { location?: string; urgency?: string; foodType?: string; providerId?: string }): Promise<any[]> {\n    let whereConditions = [eq(foodListings.isActive, 1)];\n    \n    if (filters?.location) {\n      whereConditions.push(eq(foodListings.location, filters.location));\n    }\n    if (filters?.urgency) {\n      whereConditions.push(eq(foodListings.urgency, filters.urgency as any));\n    }\n    if (filters?.foodType) {\n      whereConditions.push(eq(foodListings.foodType, filters.foodType));\n    }\n    if (filters?.providerId) {\n      whereConditions.push(eq(foodListings.providerId, filters.providerId));\n    }\n    \n    // Join with users table to get claimed NGO name\n    return db.select({\n      id: foodListings.id,\n      title: foodListings.title,\n      description: foodListings.description,\n      quantity: foodListings.quantity,\n      location: foodListings.location,\n      foodType: foodListings.foodType,\n      urgency: foodListings.urgency,\n      expiresIn: foodListings.expiresIn,\n      providerId: foodListings.providerId,\n      claimedByNgoId: foodListings.claimedByNgoId,\n      claimStatus: foodListings.claimStatus,\n      claimedAt: foodListings.claimedAt,\n      createdAt: foodListings.createdAt,\n      updatedAt: foodListings.updatedAt,\n      isActive: foodListings.isActive,\n      claimedByNgoName: users.name\n    })\n      .from(foodListings)\n      .leftJoin(users, eq(foodListings.claimedByNgoId, users.id))\n      .where(and(...whereConditions))\n      .orderBy(desc(foodListings.createdAt));\n  }\n\n  async getFoodListing(id: string): Promise<FoodListing | undefined> {\n    const [listing] = await db.select().from(foodListings).where(eq(foodListings.id, id));\n    return listing || undefined;\n  }\n\n  async createFoodListing(insertListing: InsertFoodListing): Promise<FoodListing> {\n    const [listing] = await db\n      .insert(foodListings)\n      .values(insertListing)\n      .returning();\n    return listing;\n  }\n\n  async updateFoodListing(id: string, updates: Partial<InsertFoodListing>): Promise<FoodListing | undefined> {\n    const [listing] = await db\n      .update(foodListings)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(foodListings.id, id))\n      .returning();\n    return listing || undefined;\n  }\n\n  async deleteFoodListing(id: string): Promise<boolean> {\n    const [listing] = await db\n      .update(foodListings)\n      .set({ isActive: 0 })\n      .where(eq(foodListings.id, id))\n      .returning();\n    return !!listing;\n  }\n\n  async claimFoodListing(id: string, ngoId: string): Promise<FoodListing | undefined> {\n    const [listing] = await db\n      .update(foodListings)\n      .set({ \n        claimedByNgoId: ngoId,\n        claimStatus: 'claimed',\n        claimedAt: new Date(),\n        updatedAt: new Date() \n      })\n      .where(and(\n        eq(foodListings.id, id), \n        eq(foodListings.claimStatus, 'open'),\n        eq(foodListings.isActive, 1)\n      ))\n      .returning();\n    return listing || undefined;\n  }\n\n  async unclaimFoodListing(id: string): Promise<FoodListing | undefined> {\n    const [listing] = await db\n      .update(foodListings)\n      .set({ \n        claimedByNgoId: null,\n        claimStatus: 'open',\n        claimedAt: null,\n        updatedAt: new Date() \n      })\n      .where(eq(foodListings.id, id))\n      .returning();\n    return listing || undefined;\n  }\n\n  async updateFoodListingStatus(id: string, status: string): Promise<FoodListing | undefined> {\n    const [listing] = await db\n      .update(foodListings)\n      .set({ \n        claimStatus: status as any,\n        updatedAt: new Date() \n      })\n      .where(eq(foodListings.id, id))\n      .returning();\n    return listing || undefined;\n  }\n\n  // Message methods\n  async getMessages(listingId: string): Promise<Message[]> {\n    return db.select()\n      .from(messages)\n      .where(eq(messages.listingId, listingId))\n      .orderBy(messages.createdAt);\n  }\n\n  async getUserMessagesForListing(listingId: string, userId: string): Promise<Message[]> {\n    return db.select()\n      .from(messages)\n      .where(and(\n        eq(messages.listingId, listingId),\n        or(\n          eq(messages.senderId, userId),\n          eq(messages.receiverId, userId)\n        )\n      ))\n      .orderBy(messages.createdAt);\n  }\n\n  async getConversationMessages(listingId: string, user1Id: string, user2Id: string): Promise<Message[]> {\n    return db.select()\n      .from(messages)\n      .where(and(\n        eq(messages.listingId, listingId),\n        or(\n          and(\n            eq(messages.senderId, user1Id),\n            eq(messages.receiverId, user2Id)\n          ),\n          and(\n            eq(messages.senderId, user2Id),\n            eq(messages.receiverId, user1Id)\n          )\n        )\n      ))\n      .orderBy(messages.createdAt);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async getConversations(userId: string): Promise<{ listing: FoodListing; lastMessage: Message }[]> {\n    // This would need a more complex query in a real app, simplified for now\n    const userMessages = await db.select()\n      .from(messages)\n      .where(or(eq(messages.senderId, userId), eq(messages.receiverId, userId)))\n      .orderBy(desc(messages.createdAt));\n    \n    const conversationMap = new Map<string, Message>();\n    for (const message of userMessages) {\n      if (!conversationMap.has(message.listingId)) {\n        conversationMap.set(message.listingId, message);\n      }\n    }\n    \n    const conversations = [];\n    for (const [listingId, lastMessage] of Array.from(conversationMap.entries())) {\n      const listing = await this.getFoodListing(listingId);\n      if (listing) {\n        conversations.push({ listing, lastMessage });\n      }\n    }\n    \n    return conversations;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9554},"ZeroWasteRescue/server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"ZeroWasteRescue/shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, pgEnum, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User types enum\nexport const userTypeEnum = pgEnum('user_type', ['provider', 'ngo']);\nexport const urgencyEnum = pgEnum('urgency', ['low', 'medium', 'high']);\nexport const claimStatusEnum = pgEnum('claim_status', [\n  'open', \n  'claimed', \n  'confirmed',\n  'in_process', \n  'delivery_partner_assigned', \n  'in_transit', \n  'completed', \n  'cancelled'\n]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  userType: userTypeEnum(\"user_type\").notNull(),\n  organizationType: text(\"organization_type\").notNull(),\n  address: text(\"address\").notNull(),\n  description: text(\"description\"),\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  isVerified: boolean(\"is_verified\").default(false).notNull(),\n  verifiedAt: timestamp(\"verified_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Food listings table\nexport const foodListings = pgTable(\"food_listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  quantity: text(\"quantity\").notNull(),\n  location: text(\"location\").notNull(),\n  foodType: text(\"food_type\").notNull(),\n  urgency: urgencyEnum(\"urgency\").notNull().default('medium'),\n  expiresIn: text(\"expires_in\").notNull(),\n  contactInfo: text(\"contact_info\").notNull(),\n  specialInstructions: text(\"special_instructions\"),\n  tags: text(\"tags\").array().default(sql`'{}'::text[]`),\n  providerId: varchar(\"provider_id\").notNull().references(() => users.id),\n  claimedByNgoId: varchar(\"claimed_by_ngo_id\").references(() => users.id, { onDelete: \"set null\" }),\n  claimStatus: claimStatusEnum(\"claim_status\").default('open').notNull(),\n  claimedAt: timestamp(\"claimed_at\"),\n  isActive: integer(\"is_active\").default(1).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Messages table for chat functionality\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  text: text(\"text\").notNull(),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  receiverId: varchar(\"receiver_id\").notNull().references(() => users.id),\n  listingId: varchar(\"listing_id\").notNull().references(() => foodListings.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  foodListings: many(foodListings),\n  sentMessages: many(messages, { relationName: \"sender\" }),\n  receivedMessages: many(messages, { relationName: \"receiver\" }),\n}));\n\nexport const foodListingsRelations = relations(foodListings, ({ one, many }) => ({\n  provider: one(users, {\n    fields: [foodListings.providerId],\n    references: [users.id],\n  }),\n  claimedByNgo: one(users, {\n    fields: [foodListings.claimedByNgoId],\n    references: [users.id],\n  }),\n  messages: many(messages),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n    relationName: \"sender\",\n  }),\n  receiver: one(users, {\n    fields: [messages.receiverId],\n    references: [users.id],\n    relationName: \"receiver\",\n  }),\n  listing: one(foodListings, {\n    fields: [messages.listingId],\n    references: [foodListings.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  name: true,\n  phone: true,\n  userType: true,\n  organizationType: true,\n  address: true,\n  description: true,\n});\n\nexport const insertFoodListingSchema = createInsertSchema(foodListings).pick({\n  title: true,\n  description: true,\n  quantity: true,\n  location: true,\n  foodType: true,\n  urgency: true,\n  expiresIn: true,\n  contactInfo: true,\n  specialInstructions: true,\n  tags: true,\n  providerId: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  text: true,\n  senderId: true,\n  receiverId: true,\n  listingId: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertFoodListing = z.infer<typeof insertFoodListingSchema>;\nexport type FoodListing = typeof foodListings.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n","size_bytes":4837},"ZeroWasteRescue/client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport AdminPanel from \"@/pages/AdminPanel\";\nimport NGOLogin from \"@/pages/NGOLogin\";\nimport ProviderLogin from \"@/pages/ProviderLogin\";\nimport NotFound from \"@/pages/not-found\";\nimport ProtectedAdminRoute from \"@/components/ProtectedAdminRoute\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home}/>\n      <Route path=\"/ngo-login\" component={NGOLogin}/>\n      <Route path=\"/provider-login\" component={ProviderLogin}/>\n      <Route path=\"/admin\">\n        <ProtectedAdminRoute>\n          <AdminPanel/>\n        </ProtectedAdminRoute>\n      </Route>\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1179},"ZeroWasteRescue/client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 215 15% 15%;\n\n  --border: 0 0% 85%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 215 15% 15%;\n\n  --card-border: 0 0% 92%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 215 15% 15%;\n\n  --sidebar-border: 0 0% 88%;\n\n  --sidebar-primary: 142 55% 45%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 93%;\n\n  --sidebar-accent-foreground: 215 15% 20%;\n\n  --sidebar-ring: 142 55% 45%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 215 15% 15%;\n\n  --popover-border: 0 0% 90%;\n\n  --primary: 142 55% 45%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 94%;\n\n  --secondary-foreground: 215 15% 20%;\n\n  --muted: 0 0% 95%;\n\n  --muted-foreground: 215 15% 40%;\n\n  --accent: 0 0% 93%;\n\n  --accent-foreground: 215 15% 20%;\n\n  --destructive: 0 85% 55%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 80%;\n  --ring: 142 55% 45%;\n  --chart-1: 142 65% 35%;\n  --chart-2: 25 85% 45%;\n  --chart-3: 210 75% 45%;\n  --chart-4: 280 65% 45%;\n  --chart-5: 15 75% 45%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 215 25% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 215 20% 18%;\n\n  --card: 215 20% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 215 20% 20%;\n\n  --sidebar: 215 20% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 215 20% 18%;\n\n  --sidebar-primary: 142 45% 55%;\n\n  --sidebar-primary-foreground: 215 25% 8%;\n\n  --sidebar-accent: 215 20% 15%;\n\n  --sidebar-accent-foreground: 0 0% 90%;\n\n  --sidebar-ring: 142 45% 55%;\n\n  --popover: 215 20% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 215 20% 22%;\n\n  --primary: 142 45% 55%;\n\n  --primary-foreground: 215 25% 8%;\n\n  --secondary: 215 20% 16%;\n\n  --secondary-foreground: 0 0% 90%;\n\n  --muted: 215 20% 14%;\n\n  --muted-foreground: 0 0% 70%;\n\n  --accent: 215 20% 15%;\n\n  --accent-foreground: 0 0% 90%;\n\n  --destructive: 0 75% 55%;\n\n  --destructive-foreground: 0 0% 95%;\n\n  --input: 215 20% 25%;\n  --ring: 142 45% 55%;\n  --chart-1: 142 55% 65%;\n  --chart-2: 25 85% 65%;\n  --chart-3: 210 75% 65%;\n  --chart-4: 280 65% 65%;\n  --chart-5: 15 75% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px 0px hsl(0 0% 0% / 0.2);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px 0px hsl(0 0% 0% / 0.2);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.4), 0px 1px 2px 0px hsl(0 0% 0% / 0.2);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.4), 0px 2px 4px -1px hsl(0 0% 0% / 0.2);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.4), 0px 4px 6px -2px hsl(0 0% 0% / 0.2);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.4), 0px 10px 10px -5px hsl(0 0% 0% / 0.2);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.5);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9764},"ZeroWasteRescue/client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"ZeroWasteRescue/client/src/components/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Eye, EyeOff, User, Mail, Phone, MapPin } from \"lucide-react\";\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLogin: (data: any) => void;\n  onRegister: (data: any) => void;\n  initialTab?: \"login\" | \"register\";\n}\n\nexport default function AuthModal({ isOpen, onClose, onLogin, onRegister, initialTab = \"login\" }: AuthModalProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [loginData, setLoginData] = useState({ email: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n    phone: \"\",\n    userType: \"provider\" as \"provider\" | \"ngo\",\n    organizationType: \"\",\n    address: \"\",\n    description: \"\"\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    onLogin(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Auto-determine userType based on organizationType\n    const ngoOrgTypes = [\"ngo\", \"food-bank\", \"community-group\"];\n    const userType = ngoOrgTypes.includes(registerData.organizationType) ? \"ngo\" : \"provider\";\n    \n    const registrationData = {\n      ...registerData,\n      userType\n    };\n    \n    onRegister(registrationData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Welcome to FoodBridge</DialogTitle>\n        </DialogHeader>\n\n        <Tabs defaultValue={initialTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n            <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\" className=\"space-y-4\">\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"login-email\"\n                    type=\"email\"\n                    value={loginData.email}\n                    onChange={(e) => setLoginData({...loginData, email: e.target.value})}\n                    placeholder=\"your@email.com\"\n                    className=\"pl-9\"\n                    required\n                    data-testid=\"input-login-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"login-password\">Password</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"login-password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={loginData.password}\n                    onChange={(e) => setLoginData({...loginData, password: e.target.value})}\n                    placeholder=\"Enter your password\"\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"absolute right-0 top-0 h-full px-3\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"button-toggle-password\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-login\">\n                Sign In\n              </Button>\n            </form>\n\n          </TabsContent>\n\n          <TabsContent value=\"register\" className=\"space-y-4 max-h-96 overflow-y-auto\">\n            <form onSubmit={handleRegister} className=\"space-y-4\">\n              {/* Basic Info */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-name\">Organization/Contact Name*</Label>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"register-name\"\n                    value={registerData.name}\n                    onChange={(e) => setRegisterData({...registerData, name: e.target.value})}\n                    placeholder=\"Your name or organization\"\n                    className=\"pl-9\"\n                    required\n                    data-testid=\"input-register-name\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-email\">Email*</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    value={registerData.email}\n                    onChange={(e) => setRegisterData({...registerData, email: e.target.value})}\n                    placeholder=\"your@email.com\"\n                    className=\"pl-9\"\n                    required\n                    data-testid=\"input-register-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-phone\">Phone Number*</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"register-phone\"\n                    value={registerData.phone}\n                    onChange={(e) => setRegisterData({...registerData, phone: e.target.value})}\n                    placeholder=\"+1 (555) 123-4567\"\n                    className=\"pl-9\"\n                    required\n                    data-testid=\"input-register-phone\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-type\">Organization Type*</Label>\n                <Select value={registerData.organizationType} onValueChange={(value) => setRegisterData({...registerData, organizationType: value})}>\n                  <SelectTrigger data-testid=\"select-org-type\">\n                    <SelectValue placeholder=\"Select your type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"hotel\">Hotel</SelectItem>\n                    <SelectItem value=\"restaurant\">Restaurant</SelectItem>\n                    <SelectItem value=\"hostel\">Hostel</SelectItem>\n                    <SelectItem value=\"catering\">Catering Service</SelectItem>\n                    <SelectItem value=\"ngo\">NGO/Charity</SelectItem>\n                    <SelectItem value=\"food-bank\">Food Bank</SelectItem>\n                    <SelectItem value=\"community-group\">Community Group</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-address\">Address*</Label>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-3 text-muted-foreground w-4 h-4\" />\n                  <Textarea\n                    id=\"register-address\"\n                    value={registerData.address}\n                    onChange={(e) => setRegisterData({...registerData, address: e.target.value})}\n                    placeholder=\"Full address including city and postal code\"\n                    className=\"pl-9 resize-none\"\n                    rows={2}\n                    required\n                    data-testid=\"input-register-address\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-description\">Brief Description</Label>\n                <Textarea\n                  id=\"register-description\"\n                  value={registerData.description}\n                  onChange={(e) => setRegisterData({...registerData, description: e.target.value})}\n                  placeholder=\"Tell us about your organization and how you plan to use FoodBridge\"\n                  className=\"resize-none\"\n                  rows={3}\n                  data-testid=\"input-register-description\"\n                />\n              </div>\n\n              {/* Password Fields */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-password\">Password*</Label>\n                <Input\n                  id=\"register-password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={registerData.password}\n                  onChange={(e) => setRegisterData({...registerData, password: e.target.value})}\n                  placeholder=\"Create a password\"\n                  required\n                  data-testid=\"input-register-password\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"register-confirm-password\">Confirm Password*</Label>\n                <Input\n                  id=\"register-confirm-password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={registerData.confirmPassword}\n                  onChange={(e) => setRegisterData({...registerData, confirmPassword: e.target.value})}\n                  placeholder=\"Confirm your password\"\n                  required\n                  data-testid=\"input-register-confirm-password\"\n                />\n              </div>\n\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-register\">\n                Create Account\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n\n        <div className=\"text-center text-xs text-muted-foreground\">\n          By creating an account, you agree to our Terms of Service and Privacy Policy\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10943},"ZeroWasteRescue/client/src/components/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, X, Loader2 } from \"lucide-react\";\nimport { messagesApi } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Message {\n  id: string;\n  text: string;\n  senderId: string;\n  receiverId: string;\n  listingId: string;\n  createdAt: string;\n}\n\ninterface ChatInterfaceProps {\n  isOpen: boolean;\n  onClose: () => void;\n  listing: {\n    id: string;\n    title: string;\n    provider: {\n      id: string;\n      name: string;\n    };\n  };\n  otherUser: {\n    id: string;\n    name: string;\n  };\n  currentUserId: string;\n  userType: \"provider\" | \"ngo\";\n}\n\nexport default function ChatInterface({ \n  isOpen, \n  onClose, \n  listing,\n  otherUser,\n  currentUserId,\n  userType\n}: ChatInterfaceProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [sending, setSending] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Load messages when chat opens\n  useEffect(() => {\n    if (isOpen && listing?.id) {\n      loadMessages();\n    }\n  }, [isOpen, listing?.id]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const loadMessages = async () => {\n    if (!listing?.id || !otherUser?.id) {\n      console.error(\"Missing listing or user data for loading messages\");\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const response = await messagesApi.getByListing(listing.id, otherUser.id) as Message[];\n      setMessages(response);\n    } catch (error: any) {\n      console.error(\"Load messages error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load messages\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || sending) return;\n\n    // Validate required data before sending\n    if (!otherUser?.id || !listing?.id) {\n      toast({\n        title: \"Error\",\n        description: \"Unable to send message - missing chat information\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setSending(true);\n    try {\n      const messageData = {\n        text: newMessage.trim(),\n        receiverId: otherUser.id,\n        listingId: listing.id\n      };\n\n      const newMsg = await messagesApi.send(messageData) as Message;\n      setMessages(prev => [...prev, newMsg]);\n      setNewMessage(\"\");\n    } catch (error: any) {\n      console.error(\"Message send error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setSending(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  const formatMessageTime = (createdAt: string) => {\n    return new Date(createdAt).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-2xl h-[600px] flex flex-col\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4 border-b\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar>\n              <AvatarFallback>{otherUser.name.charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div>\n              <CardTitle className=\"text-lg\" data-testid=\"text-chat-partner\">{otherUser.name}</CardTitle>\n              <Badge variant=\"outline\" className=\"text-xs\" data-testid=\"badge-listing-title\">\n                {listing.title}\n              </Badge>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose} data-testid=\"button-close-chat\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 p-0\">\n          {/* Messages */}\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4 h-[400px]\">\n            {loading ? (\n              <div className=\"flex justify-center items-center h-full\">\n                <Loader2 className=\"h-6 w-6 animate-spin\" />\n                <span className=\"ml-2\">Loading messages...</span>\n              </div>\n            ) : messages.length === 0 ? (\n              <div className=\"flex justify-center items-center h-full text-muted-foreground\">\n                <p>No messages yet. Start the conversation!</p>\n              </div>\n            ) : (\n              messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.senderId === currentUserId ? 'justify-end' : 'justify-start'}`}\n                  data-testid={`message-${message.id}`}\n                >\n                  <div\n                    className={`max-w-[80%] rounded-lg p-3 ${\n                      message.senderId === currentUserId\n                        ? 'bg-primary text-primary-foreground ml-auto'\n                        : 'bg-muted text-muted-foreground'\n                    }`}\n                  >\n                    <p className=\"text-sm\">{message.text}</p>\n                    <p className=\"text-xs opacity-70 mt-1\">{formatMessageTime(message.createdAt)}</p>\n                  </div>\n                </div>\n              ))\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Message Input */}\n          <div className=\"border-t p-4\">\n            <div className=\"flex gap-2\">\n              <Input\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Type your message...\"\n                className=\"flex-1\"\n                data-testid=\"input-message\"\n              />\n              <Button \n                onClick={handleSendMessage} \n                disabled={!newMessage.trim() || sending}\n                data-testid=\"button-send\"\n              >\n                {sending ? (\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\n                ) : (\n                  <Send className=\"w-4 h-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6976},"ZeroWasteRescue/client/src/components/FoodListingCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MapPin, Clock, Users, MessageCircle, Package } from \"lucide-react\";\n\nexport interface FoodListing {\n  id: string;\n  title: string;\n  description: string;\n  quantity: string;\n  location: string;\n  provider: string;\n  timePosted: string;\n  expiresIn: string;\n  urgency: \"low\" | \"medium\" | \"high\";\n  type: string;\n  claimStatus?: string;\n  claimedByNgoId?: string;\n  providerId?: string;\n}\n\ninterface FoodListingCardProps {\n  listing: FoodListing;\n  onContact: (id: string) => void;\n  onClaim: (id: string) => void;\n  onStatusUpdate?: (id: string, status: string) => void;\n  userType: \"provider\" | \"ngo\";\n  currentUserId?: string;\n}\n\nexport default function FoodListingCard({ \n  listing, \n  onContact, \n  onClaim, \n  onStatusUpdate, \n  userType, \n  currentUserId \n}: FoodListingCardProps) {\n  const urgencyColors = {\n    low: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300\",\n    medium: \"bg-amber-100 text-amber-800 dark:bg-amber-900/20 dark:text-amber-300\", \n    high: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300\"\n  };\n\n  const isClaimedByUser = userType === \"ngo\" && listing.claimedByNgoId === currentUserId;\n  const canUpdateStatus = isClaimedByUser && listing.claimStatus && listing.claimStatus !== 'completed' && listing.claimStatus !== 'cancelled';\n\n  const getStatusColor = (status?: string) => {\n    switch (status) {\n      case 'completed': return 'default';\n      case 'cancelled': return 'destructive'; \n      case 'in_transit': return 'secondary';\n      case 'confirmed': case 'in_process': case 'delivery_partner_assigned': return 'outline';\n      default: return 'outline';\n    }\n  };\n\n  const getStatusLabel = (status?: string) => {\n    switch (status) {\n      case 'claimed': return 'Claimed';\n      case 'confirmed': return 'Confirmed';\n      case 'in_process': return 'In Process';\n      case 'delivery_partner_assigned': return 'Driver Assigned';\n      case 'in_transit': return 'In Transit';\n      case 'completed': return 'Completed';\n      case 'cancelled': return 'Cancelled';\n      default: return status;\n    }\n  };\n\n  const getNextStatusOptions = (currentStatus?: string) => {\n    switch (currentStatus) {\n      case 'claimed':\n        return [\n          { value: 'confirmed', label: 'Confirm Pickup' },\n          { value: 'cancelled', label: 'Cancel Order' }\n        ];\n      case 'confirmed':\n        return [\n          { value: 'in_process', label: 'Start Processing' },\n          { value: 'cancelled', label: 'Cancel Order' }\n        ];\n      case 'in_process':\n        return [\n          { value: 'delivery_partner_assigned', label: 'Assign Driver' },\n          { value: 'in_transit', label: 'Pick Up Food' },\n          { value: 'cancelled', label: 'Cancel Order' }\n        ];\n      case 'delivery_partner_assigned':\n        return [\n          { value: 'in_transit', label: 'Start Delivery' },\n          { value: 'cancelled', label: 'Cancel Order' }\n        ];\n      case 'in_transit':\n        return [\n          { value: 'completed', label: 'Mark Delivered' }\n        ];\n      default:\n        return [];\n    }\n  };\n\n  return (\n    <Card className=\"hover-elevate\" data-testid={`card-listing-${listing.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex justify-between items-start gap-2\">\n          <h3 className=\"font-semibold text-lg text-card-foreground\" data-testid=\"text-listing-title\">\n            {listing.title}\n          </h3>\n          <div className=\"flex gap-2\">\n            <Badge \n              className={urgencyColors[listing.urgency]}\n              data-testid=\"badge-urgency\"\n            >\n              {listing.urgency} priority\n            </Badge>\n            {listing.claimStatus && listing.claimStatus !== 'open' && (\n              <Badge \n                variant={getStatusColor(listing.claimStatus)}\n                data-testid=\"badge-status\"\n              >\n                {getStatusLabel(listing.claimStatus)}\n              </Badge>\n            )}\n          </div>\n        </div>\n        <p className=\"text-muted-foreground\" data-testid=\"text-listing-description\">\n          {listing.description}\n        </p>\n      </CardHeader>\n\n      <CardContent className=\"space-y-3\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"w-4 h-4 text-muted-foreground\" />\n            <span data-testid=\"text-quantity\">{listing.quantity}</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Clock className=\"w-4 h-4 text-muted-foreground\" />\n            <span data-testid=\"text-expires\">Expires {listing.expiresIn}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-2 text-sm\">\n          <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n          <span data-testid=\"text-location\">{listing.location}</span>\n        </div>\n\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span data-testid=\"text-provider\">by {listing.provider}</span>\n          <span data-testid=\"text-time-posted\">{listing.timePosted}</span>\n        </div>\n\n        <Badge variant=\"secondary\" data-testid=\"badge-food-type\">\n          {listing.type}\n        </Badge>\n\n        {/* Status Update Section for NGOs */}\n        {canUpdateStatus && onStatusUpdate && (\n          <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Package className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">Update Status:</span>\n              <Select \n                value={listing.claimStatus} \n                onValueChange={(value) => onStatusUpdate(listing.id, value)}\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {getNextStatusOptions(listing.claimStatus).map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"pt-3 gap-2\">\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          onClick={() => onContact(listing.id)}\n          data-testid=\"button-contact\"\n        >\n          <MessageCircle className=\"w-4 h-4 mr-2\" />\n          Chat\n        </Button>\n        {userType === \"ngo\" && listing.claimStatus === 'open' && (\n          <Button \n            size=\"sm\" \n            onClick={() => onClaim(listing.id)}\n            data-testid=\"button-claim\"\n          >\n            Claim Food\n          </Button>\n        )}\n      </CardFooter>\n    </Card>\n  );\n}","size_bytes":7172},"ZeroWasteRescue/client/src/components/FoodRegistrationForm.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, X, MapPin, Clock, Utensils } from \"lucide-react\";\n\ninterface FoodRegistrationFormProps {\n  onSubmit: (data: any) => void;\n  onCancel: () => void;\n}\n\nexport default function FoodRegistrationForm({ onSubmit, onCancel }: FoodRegistrationFormProps) {\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    quantity: \"\",\n    location: \"\",\n    foodType: \"\",\n    expiresIn: \"\",\n    urgency: \"medium\",\n    contactInfo: \"\",\n    specialInstructions: \"\"\n  });\n\n  const [tags, setTags] = useState<string[]>([]);\n  const [newTag, setNewTag] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"Form submitted:\", { ...formData, tags });\n    onSubmit({ ...formData, tags });\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\n      setTags([...tags, newTag.trim()]);\n      setNewTag(\"\");\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  return (\n    <Card className=\"max-w-2xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Utensils className=\"w-5 h-5 text-primary\" />\n          Register Food for Donation\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"title\">Food Title*</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData({...formData, title: e.target.value})}\n                placeholder=\"e.g., Fresh Vegetarian Meals\"\n                required\n                data-testid=\"input-title\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description*</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData({...formData, description: e.target.value})}\n                placeholder=\"Describe the food items, ingredients, preparation method...\"\n                required\n                data-testid=\"input-description\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"quantity\">Quantity*</Label>\n                <Input\n                  id=\"quantity\"\n                  value={formData.quantity}\n                  onChange={(e) => setFormData({...formData, quantity: e.target.value})}\n                  placeholder=\"e.g., 25 meals, 5kg rice\"\n                  required\n                  data-testid=\"input-quantity\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"foodType\">Food Type*</Label>\n                <Select value={formData.foodType} onValueChange={(value) => setFormData({...formData, foodType: value})}>\n                  <SelectTrigger data-testid=\"select-food-type\">\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"prepared-meals\">Prepared Meals</SelectItem>\n                    <SelectItem value=\"raw-ingredients\">Raw Ingredients</SelectItem>\n                    <SelectItem value=\"packaged-food\">Packaged Food</SelectItem>\n                    <SelectItem value=\"beverages\">Beverages</SelectItem>\n                    <SelectItem value=\"baked-goods\">Baked Goods</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Location and Timing */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"location\" className=\"flex items-center gap-2\">\n                <MapPin className=\"w-4 h-4\" />\n                Pickup Location*\n              </Label>\n              <Input\n                id=\"location\"\n                value={formData.location}\n                onChange={(e) => setFormData({...formData, location: e.target.value})}\n                placeholder=\"Full address including landmark\"\n                required\n                data-testid=\"input-location\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"expiresIn\" className=\"flex items-center gap-2\">\n                  <Clock className=\"w-4 h-4\" />\n                  Expires In*\n                </Label>\n                <Select value={formData.expiresIn} onValueChange={(value) => setFormData({...formData, expiresIn: value})}>\n                  <SelectTrigger data-testid=\"select-expires\">\n                    <SelectValue placeholder=\"Select timeframe\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"2-hours\">2 hours</SelectItem>\n                    <SelectItem value=\"4-hours\">4 hours</SelectItem>\n                    <SelectItem value=\"6-hours\">6 hours</SelectItem>\n                    <SelectItem value=\"12-hours\">12 hours</SelectItem>\n                    <SelectItem value=\"1-day\">1 day</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"urgency\">Priority Level*</Label>\n                <Select value={formData.urgency} onValueChange={(value) => setFormData({...formData, urgency: value})}>\n                  <SelectTrigger data-testid=\"select-urgency\">\n                    <SelectValue placeholder=\"Select priority\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low - Flexible timing</SelectItem>\n                    <SelectItem value=\"medium\">Medium - Same day</SelectItem>\n                    <SelectItem value=\"high\">High - Urgent pickup</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div className=\"space-y-3\">\n            <Label>Tags (Optional)</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add tags like 'halal', 'vegan'...\"\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n                data-testid=\"input-tag\"\n              />\n              <Button type=\"button\" variant=\"outline\" size=\"icon\" onClick={addTag} data-testid=\"button-add-tag\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            {tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {tags.map((tag, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                    {tag}\n                    <button\n                      type=\"button\"\n                      onClick={() => removeTag(tag)}\n                      className=\"ml-1 hover:bg-destructive hover:text-destructive-foreground rounded-full\"\n                      data-testid={`button-remove-tag-${index}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </button>\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Contact Information */}\n          <div>\n            <Label htmlFor=\"contactInfo\">Contact Information*</Label>\n            <Input\n              id=\"contactInfo\"\n              value={formData.contactInfo}\n              onChange={(e) => setFormData({...formData, contactInfo: e.target.value})}\n              placeholder=\"Phone number or email for coordination\"\n              required\n              data-testid=\"input-contact\"\n            />\n          </div>\n\n          {/* Special Instructions */}\n          <div>\n            <Label htmlFor=\"specialInstructions\">Special Instructions</Label>\n            <Textarea\n              id=\"specialInstructions\"\n              value={formData.specialInstructions}\n              onChange={(e) => setFormData({...formData, specialInstructions: e.target.value})}\n              placeholder=\"Any special handling, storage requirements, or pickup instructions...\"\n              data-testid=\"input-instructions\"\n            />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-submit\">\n              Register Food Donation\n            </Button>\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel\">\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9438},"ZeroWasteRescue/client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Users, Utensils, MapPin } from \"lucide-react\";\nimport heroImage from \"@assets/generated_images/Food_sharing_community_collaboration_0e338ad3.png\";\n\ninterface HeroSectionProps {\n  onGetStarted: () => void;\n  userType: \"provider\" | \"ngo\" | null;\n}\n\nexport default function HeroSection({ onGetStarted, userType }: HeroSectionProps) {\n  return (\n    <section className=\"relative py-20 px-4 sm:px-6 lg:px-8\">\n      {/* Background Image with Overlay */}\n      <div className=\"absolute inset-0 z-0\">\n        <img \n          src={heroImage} \n          alt=\"People sharing food and working together\"\n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-black/40\"></div>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative z-10 max-w-4xl mx-auto text-center\">\n        <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6\">\n          Bridge the Gap Between\n          <span className=\"text-primary\"> Food Surplus</span> and\n          <span className=\"text-primary\"> Community Need</span>\n        </h1>\n        \n        <p className=\"text-xl text-white/90 mb-8 max-w-2xl mx-auto\">\n          Connect food providers like hotels and restaurants with NGOs to reduce waste \n          and feed communities. Every meal saved makes a difference.\n        </p>\n\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\">\n          <Button \n            size=\"lg\" \n            onClick={onGetStarted}\n            data-testid=\"button-get-started\"\n            className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          >\n            {userType === \"provider\" ? \"Register Food\" : userType === \"ngo\" ? \"Find Food\" : \"Get Started\"}\n            <ArrowRight className=\"w-5 h-5 ml-2\" />\n          </Button>\n          <Button \n            variant=\"outline\" \n            size=\"lg\"\n            className=\"bg-black/20 border-white/30 text-white hover:bg-black/30\"\n            data-testid=\"button-learn-more\"\n          >\n            Learn More\n          </Button>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto\">\n          <div className=\"text-center\">\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 inline-flex items-center justify-center mb-2\">\n              <Utensils className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold text-white\" data-testid=\"text-meals-saved\">12,000+</div>\n            <div className=\"text-white/80\">Meals Saved</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 inline-flex items-center justify-center mb-2\">\n              <Users className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold text-white\" data-testid=\"text-partners\">150+</div>\n            <div className=\"text-white/80\">Partner Organizations</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 inline-flex items-center justify-center mb-2\">\n              <MapPin className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div className=\"text-2xl font-bold text-white\" data-testid=\"text-cities\">25+</div>\n            <div className=\"text-white/80\">Cities Connected</div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":3531},"ZeroWasteRescue/client/src/components/NGODashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Search, Filter, MapPin, Clock } from \"lucide-react\";\nimport FoodListingCard, { type FoodListing } from \"./FoodListingCard\";\nimport { useFoodListings, useUpdateFoodListingStatus } from \"@/hooks/useFoodListings\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n// Helper function to convert backend listings to FoodListing format\nconst convertToFoodListing = (listing: any): FoodListing => ({\n  id: listing.id,\n  title: listing.title,\n  description: listing.description,\n  quantity: listing.quantity,\n  location: listing.location,\n  provider: \"Food Provider\", // We'd need to join with users table to get actual name\n  timePosted: new Date(listing.createdAt).toLocaleDateString() + \" ago\", // Simplified\n  expiresIn: listing.expiresIn,\n  urgency: listing.urgency as \"low\" | \"medium\" | \"high\",\n  type: listing.foodType,\n  claimStatus: listing.claimStatus,\n  claimedByNgoId: listing.claimedByNgoId,\n  providerId: listing.providerId\n});\n\ninterface NGODashboardProps {\n  onContactProvider: (listing: any, provider: any) => void;\n  onClaimListing: (listingId: string) => void;\n}\n\nexport default function NGODashboard({ onContactProvider, onClaimListing }: NGODashboardProps) {\n  const { user } = useAuth();\n  const updateStatusMutation = useUpdateFoodListingStatus();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [locationFilter, setLocationFilter] = useState(\"\");\n  const [urgencyFilter, setUrgencyFilter] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"\");\n\n  const handleStatusUpdate = async (id: string, status: string) => {\n    await updateStatusMutation.mutateAsync({ id, status });\n  };\n\n  // Get listings from API\n  const { data: apiListings, isLoading } = useFoodListings({\n    location: locationFilter !== \"all\" ? locationFilter : undefined,\n    urgency: urgencyFilter !== \"all\" ? urgencyFilter : undefined,\n    foodType: typeFilter !== \"all\" ? typeFilter : undefined\n  });\n\n  // Convert and filter listings\n  const listings = (Array.isArray(apiListings) ? apiListings : []).map((listing: any) => convertToFoodListing(listing));\n  const filteredListings = listings.filter((listing: FoodListing) => {\n    const matchesSearch = listing.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         listing.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         listing.provider.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesLocation = !locationFilter || locationFilter === \"all\" || listing.location.toLowerCase().includes(locationFilter.toLowerCase());\n    const matchesUrgency = !urgencyFilter || urgencyFilter === \"all\" || listing.urgency === urgencyFilter;\n    const matchesType = !typeFilter || typeFilter === \"all\" || listing.type === typeFilter;\n\n    return matchesSearch && matchesLocation && matchesUrgency && matchesType;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Available Food Donations</h2>\n          <p className=\"text-muted-foreground\">Find and claim food donations from local providers</p>\n        </div>\n        <Badge variant=\"secondary\" data-testid=\"badge-total-listings\">\n          {filteredListings.length} listings\n        </Badge>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"space-y-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search for food donations...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search\"\n              />\n            </div>\n\n            {/* Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <Select value={locationFilter} onValueChange={setLocationFilter}>\n                  <SelectTrigger data-testid=\"select-location-filter\">\n                    <MapPin className=\"w-4 h-4 mr-2\" />\n                    <SelectValue placeholder=\"Any location\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Any location</SelectItem>\n                    <SelectItem value=\"downtown\">Downtown</SelectItem>\n                    <SelectItem value=\"riverside\">Riverside</SelectItem>\n                    <SelectItem value=\"oak\">Oak Avenue</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Select value={urgencyFilter} onValueChange={setUrgencyFilter}>\n                  <SelectTrigger data-testid=\"select-urgency-filter\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    <SelectValue placeholder=\"Any urgency\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Any urgency</SelectItem>\n                    <SelectItem value=\"high\">High Priority</SelectItem>\n                    <SelectItem value=\"medium\">Medium Priority</SelectItem>\n                    <SelectItem value=\"low\">Low Priority</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger data-testid=\"select-type-filter\">\n                    <Filter className=\"w-4 h-4 mr-2\" />\n                    <SelectValue placeholder=\"Any type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Any type</SelectItem>\n                    <SelectItem value=\"Prepared Meals\">Prepared Meals</SelectItem>\n                    <SelectItem value=\"Baked Goods\">Baked Goods</SelectItem>\n                    <SelectItem value=\"Raw Ingredients\">Raw Ingredients</SelectItem>\n                    <SelectItem value=\"Beverages\">Beverages</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setLocationFilter(\"\");\n                  setUrgencyFilter(\"\");\n                  setTypeFilter(\"\");\n                }}\n                data-testid=\"button-clear-filters\"\n              >\n                Clear Filters\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Listings Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i}>\n              <CardHeader>\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-3 w-full\" />\n                  <Skeleton className=\"h-3 w-2/3\" />\n                  <Skeleton className=\"h-8 w-1/3\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : filteredListings.length === 0 ? (\n        <Card>\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"text-muted-foreground\">\n              <Filter className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium\">No listings found</p>\n              <p>Try adjusting your search criteria or check back later for new donations.</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredListings.map((listing: FoodListing) => (\n            <FoodListingCard\n              key={listing.id}\n              listing={listing}\n              onContact={(id: string) => onContactProvider(listing, { name: listing.provider })}\n              onClaim={onClaimListing}\n              onStatusUpdate={handleStatusUpdate}\n              userType=\"ngo\"\n              currentUserId={user?.id}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8897},"ZeroWasteRescue/client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { UserCircle, Menu, X, Heart, LogOut, Shield } from \"lucide-react\";\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  userType: \"provider\" | \"ngo\";\n  isAdmin: boolean;\n  isVerified: boolean;\n}\n\ninterface NavigationProps {\n  user: User | null;\n  onAuthClick: () => void;\n  onLogout: () => void;\n}\n\nexport default function Navigation({ user, onAuthClick, onLogout }: NavigationProps) {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [showLogoutConfirm, setShowLogoutConfirm] = useState(false);\n\n  const handleLogoutConfirm = () => {\n    onLogout();\n    setShowLogoutConfirm(false);\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <nav className=\"bg-background border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center gap-2\">\n            <div className=\"bg-primary text-primary-foreground p-2 rounded-md\">\n              <Heart className=\"w-5 h-5\" />\n            </div>\n            <span className=\"font-bold text-xl text-foreground\">FoodBridge</span>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center gap-4\">\n            {user && (\n              <>\n                <Badge variant=\"secondary\" data-testid=\"badge-user-type\">\n                  {user.userType === \"provider\" ? \"Food Provider\" : user.userType === \"ngo\" ? \"NGO\" : \"Admin\"}\n                </Badge>\n                {user.userType === \"ngo\" && !user.isVerified && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    Pending Verification\n                  </Badge>\n                )}\n                {user.isAdmin && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => window.location.href = '/admin'}\n                    data-testid=\"button-admin\"\n                  >\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Admin Panel\n                  </Button>\n                )}\n                <span className=\"text-sm text-muted-foreground\">\n                  {user.name}\n                </span>\n                <AlertDialog>\n                  <AlertDialogTrigger asChild>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\"\n                      data-testid=\"button-logout\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Logout\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Confirm Logout</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        Are you sure you want to logout? You'll need to sign in again to access your account.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>No, Cancel</AlertDialogCancel>\n                      <AlertDialogAction onClick={handleLogoutConfirm}>\n                        Yes, Logout\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </>\n            )}\n            {!user && (\n              <Button \n                variant=\"outline\" \n                onClick={onAuthClick}\n                data-testid=\"button-auth\"\n              >\n                <UserCircle className=\"w-4 h-4 mr-2\" />\n                Sign In\n              </Button>\n            )}\n          </div>\n\n          {/* Mobile Menu Button */}\n          <div className=\"md:hidden\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMenuOpen && (\n          <div className=\"md:hidden py-4 border-t border-border\">\n            <div className=\"flex flex-col gap-2\">\n              {user && (\n                <>\n                  <Badge variant=\"secondary\" className=\"w-fit\" data-testid=\"badge-user-type-mobile\">\n                    {user.userType === \"provider\" ? \"Food Provider\" : user.userType === \"ngo\" ? \"NGO\" : \"Admin\"}\n                  </Badge>\n                  {user.userType === \"ngo\" && !user.isVerified && (\n                    <Badge variant=\"destructive\" className=\"w-fit text-xs\">\n                      Pending Verification\n                    </Badge>\n                  )}\n                  <span className=\"text-sm text-muted-foreground px-2\">\n                    {user.name}\n                  </span>\n                  {user.isAdmin && (\n                    <Button \n                      variant=\"outline\" \n                      className=\"justify-start\"\n                      onClick={() => {\n                        window.location.href = '/admin';\n                        setIsMenuOpen(false);\n                      }}\n                      data-testid=\"button-admin-mobile\"\n                    >\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      Admin Panel\n                    </Button>\n                  )}\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button \n                        variant=\"outline\" \n                        className=\"justify-start\"\n                        data-testid=\"button-logout-mobile\"\n                      >\n                        <LogOut className=\"w-4 h-4 mr-2\" />\n                        Logout\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Confirm Logout</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to logout? You'll need to sign in again to access your account.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>No, Cancel</AlertDialogCancel>\n                        <AlertDialogAction onClick={handleLogoutConfirm}>\n                          Yes, Logout\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </>\n              )}\n              {!user && (\n                <Button \n                  variant=\"outline\" \n                  className=\"justify-start\"\n                  onClick={() => {\n                    onAuthClick();\n                    setIsMenuOpen(false);\n                  }}\n                  data-testid=\"button-auth-mobile\"\n                >\n                  <UserCircle className=\"w-4 h-4 mr-2\" />\n                  Sign In\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}","size_bytes":7760},"ZeroWasteRescue/client/src/components/ProtectedAdminRoute.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Shield, Lock, ArrowLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Link } from \"wouter\";\n\ninterface ProtectedAdminRouteProps {\n  children: React.ReactNode;\n}\n\nexport default function ProtectedAdminRoute({ children }: ProtectedAdminRouteProps) {\n  const [, setLocation] = useLocation();\n  const [isAdminAuthenticated, setIsAdminAuthenticated] = useState(false);\n  const [adminCredentials, setAdminCredentials] = useState({ email: \"\", password: \"\" });\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // Check if user is already authenticated and is admin\n  const { data: currentUser, isLoading } = useQuery({\n    queryKey: [\"auth\", \"me\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/auth/me\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        if (response.status === 401) {\n          return null; // Not authenticated\n        }\n        throw new Error(\"Failed to fetch user data\");\n      }\n      return response.json();\n    },\n    retry: false,\n  });\n\n  useEffect(() => {\n    if (currentUser?.user?.isAdmin) {\n      setIsAdminAuthenticated(true);\n    }\n  }, [currentUser]);\n\n  const handleAdminLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoggingIn(true);\n    setErrorMessage(\"\");\n\n    try {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(adminCredentials),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Login failed\");\n      }\n\n      const data = await response.json();\n      \n      if (data.user.isAdmin) {\n        setIsAdminAuthenticated(true);\n      } else {\n        setErrorMessage(\"Access denied. Admin privileges required.\");\n      }\n    } catch (error: any) {\n      setErrorMessage(error.message || \"Login failed\");\n    } finally {\n      setIsLoggingIn(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Shield className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>Checking authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAdminAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-100 to-slate-200 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"absolute left-4 top-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n\n          <Card className=\"shadow-lg border-red-200\">\n            <CardHeader className=\"text-center\">\n              <div className=\"flex justify-center mb-4\">\n                <div className=\"p-3 bg-red-100 rounded-full\">\n                  <Lock className=\"h-8 w-8 text-red-600\" />\n                </div>\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-red-900\">Admin Access Required</CardTitle>\n              <CardDescription>\n                This area is restricted to authorized administrators only\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent>\n              <form onSubmit={handleAdminLogin} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"admin-email\">Admin Email</Label>\n                  <Input\n                    id=\"admin-email\"\n                    type=\"email\"\n                    value={adminCredentials.email}\n                    onChange={(e) => setAdminCredentials({...adminCredentials, email: e.target.value})}\n                    placeholder=\"admin@foodbridge.com\"\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"admin-password\">Admin Password</Label>\n                  <Input\n                    id=\"admin-password\"\n                    type=\"password\"\n                    value={adminCredentials.password}\n                    onChange={(e) => setAdminCredentials({...adminCredentials, password: e.target.value})}\n                    placeholder=\"Enter admin password\"\n                    required\n                  />\n                </div>\n\n                {errorMessage && (\n                  <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                    <p className=\"text-sm text-red-600\">{errorMessage}</p>\n                  </div>\n                )}\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-red-600 hover:bg-red-700\" \n                  disabled={isLoggingIn}\n                >\n                  {isLoggingIn ? \"Authenticating...\" : \"Access Admin Panel\"}\n                </Button>\n              </form>\n\n              <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <h3 className=\"font-semibold text-yellow-800 mb-2\">Admin Setup Instructions:</h3>\n                <div className=\"text-sm text-yellow-700 space-y-1\">\n                  <p>1. Create an admin account by registering with an email listed in ADMIN_EMAILS environment variable</p>\n                  <p>2. Or use an existing admin account credentials</p>\n                  <p>3. Contact system administrator if you need admin access</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":6070},"ZeroWasteRescue/client/src/components/ProviderDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Edit, Trash2, MessageCircle, Plus, Eye } from \"lucide-react\";\nimport { useProviderFoodListings, useUpdateFoodListing, useDeleteFoodListing } from \"@/hooks/useFoodListings\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ProviderDashboardProps {\n  onCreateNew: () => void;\n  onEditListing: (listing: any) => void;\n  onViewMessages: (listing: any) => void;\n}\n\nexport default function ProviderDashboard({ \n  onCreateNew, \n  onEditListing, \n  onViewMessages \n}: ProviderDashboardProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingListing, setEditingListing] = useState<any>(null);\n  const [editFormData, setEditFormData] = useState<any>({});\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  // SECURITY FIX: Get provider's own listings only\n  const { data: apiListings, isLoading, refetch } = useProviderFoodListings(user?.id || \"\");\n  const updateListingMutation = useUpdateFoodListing();\n  const deleteListingMutation = useDeleteFoodListing();\n\n  const handleDeleteListing = async (listingId: string) => {\n    if (!confirm(\"Are you sure you want to delete this listing? This action cannot be undone.\")) {\n      return;\n    }\n    \n    try {\n      await deleteListingMutation.mutateAsync(listingId);\n      refetch();\n    } catch (error) {\n      // Error handling is done by the mutation hook\n    }\n  };\n\n  // COMPLETENESS FIX: Implement actual edit functionality\n  const handleEditListing = (listing: any) => {\n    setEditingListing(listing);\n    setEditFormData({\n      title: listing.title,\n      description: listing.description,\n      quantity: listing.quantity,\n      location: listing.location,\n      foodType: listing.foodType,\n      urgency: listing.urgency,\n      expiresIn: listing.expiresIn\n    });\n  };\n\n  const handleSaveEdit = async () => {\n    if (!editingListing) return;\n    \n    try {\n      await updateListingMutation.mutateAsync({ \n        id: editingListing.id, \n        data: editFormData \n      });\n      setEditingListing(null);\n      setEditFormData({});\n      refetch();\n    } catch (error) {\n      // Error handling is done by the mutation hook\n    }\n  };\n\n  // FUNCTIONAL FIX: Fix messaging integration\n  const handleViewMessages = (listing: any) => {\n    // Only allow messaging if the listing has been claimed by an NGO\n    if (!listing.claimedByNgoId) {\n      toast({\n        title: \"No messages available\",\n        description: \"This listing hasn't been claimed by any NGO yet. Messages will be available once claimed.\",\n        variant: \"default\"\n      });\n      return;\n    }\n    \n    // Call the parent's onViewMessages with valid NGO data\n    onViewMessages({\n      ...listing,\n      claimedBy: {\n        id: listing.claimedByNgoId,\n        name: listing.claimedByNgoName || \"Claimed NGO\"\n      }\n    });\n  };\n\n  // Filter listings based on search\n  const filteredListings = (Array.isArray(apiListings) ? apiListings : []).filter((listing: any) =>\n    listing.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    listing.description.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Enhanced filtering for new status options\n  const activeListings = filteredListings.filter((listing: any) => listing.claimStatus === 'open');\n  const claimedListings = filteredListings.filter((listing: any) => \n    listing.claimStatus !== 'open' && listing.claimStatus !== 'cancelled'\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <Skeleton className=\"h-8 w-64\" />\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map(i => (\n            <Skeleton key={i} className=\"h-48 w-full\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const ListingCard = ({ listing }: { listing: any }): JSX.Element => (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div>\n            <CardTitle className=\"text-lg\">{listing.title}</CardTitle>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Posted {new Date(listing.createdAt).toLocaleDateString()}\n            </p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Badge variant={listing.urgency === 'high' ? 'destructive' : \n                           listing.urgency === 'medium' ? 'default' : 'secondary'}>\n              {listing.urgency} priority\n            </Badge>\n            {listing.claimStatus !== 'open' && (\n              <Badge variant={\n                listing.claimStatus === 'completed' ? 'default' :\n                listing.claimStatus === 'cancelled' ? 'destructive' :\n                listing.claimStatus === 'in_transit' ? 'secondary' :\n                'outline'\n              }>\n                {listing.claimStatus === 'claimed' ? 'Claimed' :\n                 listing.claimStatus === 'confirmed' ? 'Confirmed' :\n                 listing.claimStatus === 'in_process' ? 'In Process' :\n                 listing.claimStatus === 'delivery_partner_assigned' ? 'Driver Assigned' :\n                 listing.claimStatus === 'in_transit' ? 'In Transit' :\n                 listing.claimStatus === 'completed' ? 'Completed' :\n                 listing.claimStatus === 'cancelled' ? 'Cancelled' :\n                 listing.claimStatus}\n              </Badge>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-sm text-muted-foreground mb-4\">{listing.description}</p>\n        \n        <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm\">\n          <div>\n            <span className=\"font-medium\">Quantity:</span> {listing.quantity}\n          </div>\n          <div>\n            <span className=\"font-medium\">Location:</span> {listing.location}\n          </div>\n          <div>\n            <span className=\"font-medium\">Food Type:</span> {listing.foodType}\n          </div>\n          <div>\n            <span className=\"font-medium\">Expires:</span> {listing.expiresIn}\n          </div>\n        </div>\n\n        {/* Status Timeline for claimed listings */}\n        {listing.claimStatus !== 'open' && listing.claimedByNgoId && (\n          <div className=\"mb-4 p-3 bg-muted rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <span className=\"font-medium text-sm\">NGO:</span>\n              <span className=\"text-sm\">{listing.claimedByNgoName || 'Claimed NGO'}</span>\n            </div>\n            {listing.claimedAt && (\n              <div className=\"text-xs text-muted-foreground\">\n                Claimed: {new Date(listing.claimedAt).toLocaleDateString()} at {new Date(listing.claimedAt).toLocaleTimeString()}\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"flex gap-2 pt-4 border-t\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleViewMessages(listing)}\n            className=\"flex items-center gap-2\"\n            disabled={!listing.claimedByNgoId}\n          >\n            <MessageCircle className=\"h-4 w-4\" />\n            Messages {listing.claimedByNgoId ? \"\" : \"(No NGO yet)\"}\n          </Button>\n          \n          {listing.claimStatus === 'open' && (\n            <>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleEditListing(listing)}\n                className=\"flex items-center gap-2\"\n                disabled={updateListingMutation.isPending}\n              >\n                <Edit className=\"h-4 w-4\" />\n                Edit\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleDeleteListing(listing.id)}\n                className=\"flex items-center gap-2 text-destructive hover:text-destructive\"\n                disabled={deleteListingMutation.isPending}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n                Delete\n              </Button>\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">My Food Listings</h2>\n          <p className=\"text-muted-foreground\">Manage your donated food listings</p>\n        </div>\n        <Button onClick={onCreateNew} className=\"flex items-center gap-2\">\n          <Plus className=\"h-4 w-4\" />\n          Add New Listing\n        </Button>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center gap-4\">\n            <Input\n              placeholder=\"Search your listings...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"max-w-sm\"\n            />\n            <Badge variant=\"secondary\">\n              {filteredListings.length} total listings\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Listings Tabs */}\n      <Tabs defaultValue=\"active\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"active\" className=\"flex items-center gap-2\">\n            <Eye className=\"h-4 w-4\" />\n            Active ({activeListings.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"claimed\" className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"h-4 w-4 rounded-full\" />\n            Claimed ({claimedListings.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"active\" className=\"space-y-4\">\n          {activeListings.length > 0 ? (\n            activeListings.map(listing => (\n              <ListingCard key={listing.id} listing={listing} />\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"pt-6 text-center\">\n                <p className=\"text-muted-foreground\">No active listings found.</p>\n                <Button onClick={onCreateNew} className=\"mt-4\">\n                  Create Your First Listing\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"claimed\" className=\"space-y-4\">\n          {claimedListings.length > 0 ? (\n            claimedListings.map(listing => (\n              <ListingCard key={listing.id} listing={listing} />\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"pt-6 text-center\">\n                <p className=\"text-muted-foreground\">No claimed listings yet.</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingListing} onOpenChange={() => setEditingListing(null)}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Food Listing</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                value={editFormData.title || \"\"}\n                onChange={(e) => setEditFormData({ ...editFormData, title: e.target.value })}\n                placeholder=\"Food listing title\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                value={editFormData.description || \"\"}\n                onChange={(e) => setEditFormData({ ...editFormData, description: e.target.value })}\n                placeholder=\"Describe the food items...\"\n                rows={3}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"quantity\">Quantity</Label>\n                <Input\n                  id=\"quantity\"\n                  value={editFormData.quantity || \"\"}\n                  onChange={(e) => setEditFormData({ ...editFormData, quantity: e.target.value })}\n                  placeholder=\"e.g., 5 portions\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"foodType\">Food Type</Label>\n                <Select \n                  value={editFormData.foodType || \"\"} \n                  onValueChange={(value) => setEditFormData({ ...editFormData, foodType: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"prepared\">Prepared Food</SelectItem>\n                    <SelectItem value=\"packaged\">Packaged Food</SelectItem>\n                    <SelectItem value=\"fresh\">Fresh Produce</SelectItem>\n                    <SelectItem value=\"baked\">Baked Goods</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"urgency\">Urgency</Label>\n                <Select \n                  value={editFormData.urgency || \"\"} \n                  onValueChange={(value) => setEditFormData({ ...editFormData, urgency: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select urgency\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"expiresIn\">Expires In</Label>\n                <Select \n                  value={editFormData.expiresIn || \"\"} \n                  onValueChange={(value) => setEditFormData({ ...editFormData, expiresIn: value })}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Expiry time\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"2 hours\">2 hours</SelectItem>\n                    <SelectItem value=\"4 hours\">4 hours</SelectItem>\n                    <SelectItem value=\"8 hours\">8 hours</SelectItem>\n                    <SelectItem value=\"1 day\">1 day</SelectItem>\n                    <SelectItem value=\"2 days\">2 days</SelectItem>\n                    <SelectItem value=\"3 days\">3 days</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"location\">Location</Label>\n              <Input\n                id=\"location\"\n                value={editFormData.location || \"\"}\n                onChange={(e) => setEditFormData({ ...editFormData, location: e.target.value })}\n                placeholder=\"Pickup location\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleSaveEdit} \n                disabled={updateListingMutation.isPending}\n                className=\"flex-1\"\n              >\n                {updateListingMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setEditingListing(null)}\n                disabled={updateListingMutation.isPending}\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16749},"ZeroWasteRescue/client/src/components/UserTypeSelector.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Building2, Heart, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface UserTypeSelectorProps {\n  onSelectType: (type: \"provider\" | \"ngo\") => void;\n}\n\nexport default function UserTypeSelector({ onSelectType }: UserTypeSelectorProps) {\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            How would you like to help reduce food waste?\n          </h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Choose your role to get started with FoodBridge\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {/* Food Provider Card */}\n          <Card className=\"hover-elevate cursor-pointer group\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"bg-green-100 rounded-full p-6 w-20 h-20 mx-auto mb-6 flex items-center justify-center group-hover:bg-green-200 transition-colors\">\n                <Building2 className=\"w-10 h-10 text-green-600\" />\n              </div>\n              \n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">Food Provider</h3>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                Hotels, restaurants, hostels, and catering services with surplus food \n                ready to donate to those in need.\n              </p>\n              \n              <ul className=\"text-sm text-muted-foreground space-y-2 mb-6 text-left\">\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-green-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Register surplus food quickly\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-green-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Connect directly with NGOs\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-green-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Reduce waste and help communities\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-green-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Track your social impact\n                </li>\n              </ul>\n\n              <Link href=\"/provider-login\">\n                <Button \n                  className=\"w-full group bg-green-600 hover:bg-green-700\"\n                  data-testid=\"button-select-provider\"\n                >\n                  I'm a Food Provider\n                  <ArrowRight className=\"w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          {/* NGO Card */}\n          <Card className=\"hover-elevate cursor-pointer group\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"bg-blue-100 rounded-full p-6 w-20 h-20 mx-auto mb-6 flex items-center justify-center group-hover:bg-blue-200 transition-colors\">\n                <Heart className=\"w-10 h-10 text-blue-600\" />\n              </div>\n              \n              <h3 className=\"text-xl font-semibold text-foreground mb-3\">NGO / Charity</h3>\n              <p className=\"text-muted-foreground mb-6 leading-relaxed\">\n                Non-profit organizations, food banks, and community groups \n                helping distribute food to those who need it most.\n              </p>\n              \n              <ul className=\"text-sm text-muted-foreground space-y-2 mb-6 text-left\">\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Find available food donations\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Coordinate pickup and distribution\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Serve more community members\n                </li>\n                <li className=\"flex items-start gap-2\">\n                  <div className=\"w-1.5 h-1.5 bg-blue-600 rounded-full mt-2 flex-shrink-0\"></div>\n                  Build partnerships with providers\n                </li>\n              </ul>\n\n              <Link href=\"/ngo-login\">\n                <Button \n                  className=\"w-full group bg-blue-600 hover:bg-blue-700\"\n                  data-testid=\"button-select-ngo\"\n                >\n                  I'm an NGO\n                  <ArrowRight className=\"w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform\" />\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"text-center mt-8\">\n          <p className=\"text-sm text-muted-foreground\">\n            You can always switch between roles later in your profile settings\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5532},"ZeroWasteRescue/client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"ZeroWasteRescue/client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"ZeroWasteRescue/client/src/hooks/useAuth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { authApi } from '@/lib/api';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n  userType: 'provider' | 'ngo';\n  organizationType: string;\n  address: string;\n  phone: string;\n  description?: string;\n  isAdmin: boolean;\n  isVerified: boolean;\n}\n\nexport function useAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if user is logged in on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const response = await authApi.getMe() as any;\n        setUser(response.user);\n      } catch (error) {\n        // User is not logged in\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    setError(null);\n    setLoading(true);\n    \n    try {\n      const response = await authApi.login(email, password) as any;\n      setUser(response.user);\n    } catch (error: any) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const register = async (data: any) => {\n    setError(null);\n    setLoading(true);\n    \n    try {\n      const response = await authApi.register(data) as any;\n      setUser(response.user);\n    } catch (error: any) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    setError(null);\n    setLoading(true);\n    \n    try {\n      await authApi.logout();\n      setUser(null);\n    } catch (error: any) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return {\n    user,\n    login,\n    register,\n    logout,\n    loading,\n    error,\n  };\n}","size_bytes":1876},"ZeroWasteRescue/client/src/hooks/useFoodListings.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { foodListingsApi } from '@/lib/api';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function useFoodListings(filters?: { location?: string; urgency?: string; foodType?: string; providerId?: string }) {\n  return useQuery({\n    queryKey: ['food-listings', filters],\n    queryFn: () => foodListingsApi.getAll(filters),\n  });\n}\n\nexport function useProviderFoodListings(providerId: string) {\n  return useQuery({\n    queryKey: ['food-listings', 'provider', providerId],\n    queryFn: () => foodListingsApi.getAll({ providerId }),\n    enabled: !!providerId,\n  });\n}\n\nexport function useFoodListing(id: string) {\n  return useQuery({\n    queryKey: ['food-listing', id],\n    queryFn: () => foodListingsApi.getById(id),\n    enabled: !!id,\n  });\n}\n\nexport function useCreateFoodListing() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: foodListingsApi.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['food-listings'] });\n      toast({\n        title: \"Success!\",\n        description: \"Food listing created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useUpdateFoodListing() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => foodListingsApi.update(id, data),\n    onSuccess: (_, { id }) => {\n      queryClient.invalidateQueries({ queryKey: ['food-listings'] });\n      queryClient.invalidateQueries({ queryKey: ['food-listing', id] });\n      toast({\n        title: \"Success!\",\n        description: \"Food listing updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useDeleteFoodListing() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: foodListingsApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['food-listings'] });\n      toast({\n        title: \"Success!\",\n        description: \"Food listing deleted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useUpdateFoodListingStatus() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: ({ id, status }: { id: string; status: string }) => \n      fetch(`/api/food-listings/${id}/status`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ claimStatus: status })\n      }).then(async res => {\n        if (!res.ok) {\n          const error = await res.json();\n          throw new Error(error.error || 'Failed to update status');\n        }\n        return res.json();\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['food-listings'] });\n      toast({\n        title: \"Status Updated!\",\n        description: \"Food listing status updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}\n\nexport function useClaimFoodListing() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  return useMutation({\n    mutationFn: (listingId: string) => \n      fetch(`/api/food-listings/${listingId}/claim`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n      }).then(async res => {\n        if (!res.ok) {\n          const error = await res.json();\n          throw new Error(error.error || 'Failed to claim listing');\n        }\n        return res.json();\n      }),\n    onSuccess: (data) => {\n      // Invalidate all food listings queries to refresh both NGO and Provider dashboards\n      queryClient.invalidateQueries({ queryKey: ['food-listings'] });\n      toast({\n        title: \"Listing Claimed!\",\n        description: \"You have successfully claimed this listing. The provider has been notified and you can now coordinate pickup.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Unable to Claim\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n}","size_bytes":4755},"ZeroWasteRescue/client/src/lib/api.ts":{"content":"// API client for backend communication\nconst API_BASE = '/api';\n\nclass ApiError extends Error {\n  constructor(public status: number, message: string) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\nasync function apiRequest<T>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const response = await fetch(`${API_BASE}${endpoint}`, {\n    credentials: 'include', // Include cookies for session\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ error: 'Unknown error' }));\n    throw new ApiError(response.status, error.error || `HTTP ${response.status}`);\n  }\n\n  return response.json();\n}\n\n// Auth API\nexport const authApi = {\n  register: (data: any) =>\n    apiRequest('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n  \n  login: (email: string, password: string) =>\n    apiRequest('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    }),\n  \n  logout: () =>\n    apiRequest('/auth/logout', {\n      method: 'POST',\n    }),\n  \n  getMe: () => apiRequest('/auth/me'),\n};\n\n// Food listings API\nexport const foodListingsApi = {\n  getAll: (filters?: { location?: string; urgency?: string; foodType?: string; providerId?: string }) => {\n    const params = new URLSearchParams();\n    if (filters?.location && filters.location !== 'all') params.append('location', filters.location);\n    if (filters?.urgency && filters.urgency !== 'all') params.append('urgency', filters.urgency);\n    if (filters?.foodType && filters.foodType !== 'all') params.append('foodType', filters.foodType);\n    if (filters?.providerId) params.append('providerId', filters.providerId);\n    \n    return apiRequest(`/food-listings${params.toString() ? `?${params}` : ''}`);\n  },\n  \n  getById: (id: string) => apiRequest(`/food-listings/${id}`),\n  \n  create: (data: any) =>\n    apiRequest('/food-listings', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n  \n  update: (id: string, data: any) =>\n    apiRequest(`/food-listings/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    }),\n  \n  delete: (id: string) =>\n    apiRequest(`/food-listings/${id}`, {\n      method: 'DELETE',\n    }),\n};\n\n// Messages API\nexport const messagesApi = {\n  getByListing: (listingId: string, otherUserId: string) => {\n    const params = new URLSearchParams({ otherUserId });\n    return apiRequest(`/messages/${listingId}?${params}`);\n  },\n  \n  send: (data: { text: string; receiverId: string; listingId: string }) =>\n    apiRequest('/messages', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n  \n  getConversations: () => apiRequest('/conversations'),\n};\n\nexport { ApiError };","size_bytes":2806},"ZeroWasteRescue/client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"ZeroWasteRescue/client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"ZeroWasteRescue/client/src/pages/AdminPanel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { CheckCircle, XCircle, Users, Clock, Shield } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface NGO {\n  id: string;\n  email: string;\n  name: string;\n  phone: string;\n  organizationType: string;\n  address: string;\n  description?: string;\n  isVerified: boolean;\n  createdAt: string;\n}\n\nexport default function AdminPanel() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"pending\");\n\n  // Fetch NGOs by status\n  const { data: pendingNgos, isLoading: loadingPending } = useQuery<NGO[]>({\n    queryKey: [\"admin\", \"ngos\", \"pending\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/ngos?status=pending\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch pending NGOs\");\n      return response.json();\n    },\n  });\n\n  const { data: verifiedNgos, isLoading: loadingVerified } = useQuery<NGO[]>({\n    queryKey: [\"admin\", \"ngos\", \"verified\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/ngos?status=verified\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch verified NGOs\");\n      return response.json();\n    },\n  });\n\n  const { data: allNgos, isLoading: loadingAll } = useQuery<NGO[]>({\n    queryKey: [\"admin\", \"ngos\", \"all\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/ngos\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch all NGOs\");\n      return response.json();\n    },\n  });\n\n  // Verify NGO mutation\n  const verifyMutation = useMutation({\n    mutationFn: async (ngoId: string) => {\n      const response = await fetch(`/api/admin/ngos/${ngoId}/verify`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to verify NGO\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"ngos\"] });\n      toast({\n        title: \"Success\",\n        description: \"NGO has been verified successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to verify NGO\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Reject NGO mutation\n  const rejectMutation = useMutation({\n    mutationFn: async (ngoId: string) => {\n      const response = await fetch(`/api/admin/ngos/${ngoId}/reject`, {\n        method: \"POST\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to reject NGO\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"admin\", \"ngos\"] });\n      toast({\n        title: \"Success\",\n        description: \"NGO application has been rejected\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reject NGO\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVerify = (ngoId: string) => {\n    verifyMutation.mutate(ngoId);\n  };\n\n  const handleReject = (ngoId: string) => {\n    if (confirm(\"Are you sure you want to reject this NGO application? This action cannot be undone.\")) {\n      rejectMutation.mutate(ngoId);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const NGOCard = ({ ngo, showActions = true }: { ngo: NGO; showActions?: boolean }) => (\n    <Card key={ngo.id} className=\"mb-4\">\n      <CardHeader>\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <CardTitle className=\"text-lg\">{ngo.name}</CardTitle>\n            <CardDescription>{ngo.organizationType}</CardDescription>\n          </div>\n          <Badge variant={ngo.isVerified ? \"default\" : \"secondary\"}>\n            {ngo.isVerified ? \"Verified\" : \"Pending\"}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2 text-sm\">\n          <p><strong>Email:</strong> {ngo.email}</p>\n          <p><strong>Phone:</strong> {ngo.phone}</p>\n          <p><strong>Address:</strong> {ngo.address}</p>\n          {ngo.description && (\n            <p><strong>Description:</strong> {ngo.description}</p>\n          )}\n          <p><strong>Applied:</strong> {formatDate(ngo.createdAt)}</p>\n        </div>\n        \n        {showActions && !ngo.isVerified && (\n          <div className=\"flex gap-2 mt-4\">\n            <Button\n              onClick={() => handleVerify(ngo.id)}\n              disabled={verifyMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\n              Verify\n            </Button>\n            <Button\n              onClick={() => handleReject(ngo.id)}\n              disabled={rejectMutation.isPending}\n              variant=\"destructive\"\n            >\n              <XCircle className=\"h-4 w-4 mr-2\" />\n              Reject\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"flex items-center gap-2 mb-8\">\n        <Shield className=\"h-8 w-8 text-blue-600\" />\n        <h1 className=\"text-3xl font-bold\">Admin Panel</h1>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Verification</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pendingNgos?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">NGOs awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Verified NGOs</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{verifiedNgos?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">Active organizations</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total NGOs</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{allNgos?.length || 0}</div>\n            <p className=\"text-xs text-muted-foreground\">All organizations</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* NGO Management Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"pending\">\n            Pending Verification ({pendingNgos?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"verified\">\n            Verified NGOs ({verifiedNgos?.length || 0})\n          </TabsTrigger>\n          <TabsTrigger value=\"all\">\n            All NGOs ({allNgos?.length || 0})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pending\" className=\"mt-6\">\n          {loadingPending ? (\n            <div className=\"text-center py-8\">Loading pending NGOs...</div>\n          ) : pendingNgos?.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No NGOs pending verification\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {pendingNgos?.map((ngo) => (\n                <NGOCard key={ngo.id} ngo={ngo} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"verified\" className=\"mt-6\">\n          {loadingVerified ? (\n            <div className=\"text-center py-8\">Loading verified NGOs...</div>\n          ) : verifiedNgos?.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No verified NGOs yet\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {verifiedNgos?.map((ngo) => (\n                <NGOCard key={ngo.id} ngo={ngo} showActions={false} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"all\" className=\"mt-6\">\n          {loadingAll ? (\n            <div className=\"text-center py-8\">Loading all NGOs...</div>\n          ) : allNgos?.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              No NGOs registered yet\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {allNgos?.map((ngo) => (\n                <NGOCard key={ngo.id} ngo={ngo} showActions={!ngo.isVerified} />\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":9804},"ZeroWasteRescue/client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport HeroSection from \"@/components/HeroSection\";\nimport UserTypeSelector from \"@/components/UserTypeSelector\";\nimport FoodRegistrationForm from \"@/components/FoodRegistrationForm\";\nimport NGODashboard from \"@/components/NGODashboard\";\nimport ProviderDashboard from \"@/components/ProviderDashboard\";\nimport ChatInterface from \"@/components/ChatInterface\";\nimport AuthModal from \"@/components/AuthModal\";\nimport Footer from \"@/components/Footer\";\nimport FoodWasteAwareness from \"@/components/FoodWasteAwareness\";\nimport FeaturesSection from \"@/components/FeaturesSection\";\nimport CommunityImpact from \"@/components/CommunityImpact\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCreateFoodListing, useClaimFoodListing } from \"@/hooks/useFoodListings\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Home() {\n  // Authentication\n  const { user, login, register, logout } = useAuth();\n  const { toast } = useToast();\n  const createFoodListingMutation = useCreateFoodListing();\n  const claimFoodListingMutation = useClaimFoodListing();\n  \n  // UI state\n  const [currentView, setCurrentView] = useState<\"home\" | \"register-food\" | \"dashboard\" | \"provider-dashboard\">(\"home\");\n  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [currentChatData, setCurrentChatData] = useState<{\n    listing: {\n      id: string;\n      title: string;\n      provider: { id: string; name: string; };\n    };\n    otherUser: { id: string; name: string; };\n  } | null>(null);\n\n  // Handle user type selection\n  const handleUserTypeSelection = (type: \"provider\" | \"ngo\") => {\n    if (!user) {\n      setIsAuthModalOpen(true);\n      return;\n    }\n    \n    // Check if NGO is verified before allowing access\n    if (type === \"ngo\" && user.userType === \"ngo\") {\n      if (!user.isVerified) {\n        toast({\n          title: \"Verification Required\",\n          description: \"Your NGO account is pending admin verification. Please wait for approval before accessing the dashboard.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setCurrentView(\"dashboard\");\n    } else if (type === \"provider\" && user.userType === \"provider\") {\n      setCurrentView(\"provider-dashboard\");\n    } else {\n      toast({\n        title: \"Access denied\",\n        description: `You are registered as a ${user.userType}. This feature is only available for ${type}s.`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle logout\n  const handleLogout = async () => {\n    try {\n      await logout();\n      setCurrentView(\"home\");\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle authentication\n  const handleLogin = async (data: any) => {\n    try {\n      await login(data.email, data.password);\n      setIsAuthModalOpen(false);\n      toast({\n        title: \"Success!\",\n        description: \"Welcome back!\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRegister = async (data: any) => {\n    try {\n      await register(data);\n      setIsAuthModalOpen(false);\n      toast({\n        title: \"Success!\",\n        description: \"Account created successfully!\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle food registration\n  const handleFoodRegistration = async (data: any) => {\n    try {\n      await createFoodListingMutation.mutateAsync(data);\n      setCurrentView(\"home\");\n    } catch (error) {\n      // Error is handled by the mutation hook\n    }\n  };\n\n  // Handle chat\n  const handleContactProvider = (listing: any, provider: any) => {\n    if (!user) {\n      setIsAuthModalOpen(true);\n      return;\n    }\n\n    // Validate required data\n    if (!listing?.id || !provider?.id) {\n      toast({\n        title: \"Error\",\n        description: \"Unable to start chat - missing required information\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setCurrentChatData({\n      listing: {\n        id: listing.id,\n        title: listing.title || \"Food Listing\",\n        provider: {\n          id: provider.id,\n          name: provider.name || \"Food Provider\"\n        }\n      },\n      otherUser: {\n        id: provider.id,\n        name: provider.name || \"Food Provider\"\n      }\n    });\n    setIsChatOpen(true);\n  };\n\n  const handleClaimListing = async (listingId: string) => {\n    if (!user) {\n      setIsAuthModalOpen(true);\n      return;\n    }\n\n    if (user.userType !== \"ngo\") {\n      toast({\n        title: \"Access Denied\",\n        description: \"Only NGOs can claim food listings.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!user.isVerified) {\n      toast({\n        title: \"Verification Required\",\n        description: \"Your NGO account must be verified before you can claim listings.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await claimFoodListingMutation.mutateAsync(listingId);\n    } catch (error) {\n      // Error handling is done in the mutation hook\n    }\n  };\n\n  const renderCurrentView = () => {\n    switch (currentView) {\n      case \"register-food\":\n        return (\n          <div className=\"min-h-screen bg-background py-8 px-4\">\n            <FoodRegistrationForm\n              onSubmit={handleFoodRegistration}\n              onCancel={() => setCurrentView(\"home\")}\n            />\n          </div>\n        );\n      \n      case \"dashboard\":\n        return (\n          <div className=\"min-h-screen bg-background py-8 px-4\">\n            <NGODashboard\n              onContactProvider={handleContactProvider}\n              onClaimListing={handleClaimListing}\n            />\n          </div>\n        );\n      \n      case \"provider-dashboard\":\n        return (\n          <div className=\"min-h-screen bg-background py-8 px-4\">\n            <ProviderDashboard\n              onCreateNew={() => setCurrentView(\"register-food\")}\n              onEditListing={(listing) => {\n                // TODO: Implement edit functionality\n                toast({\n                  title: \"Edit Listing\",\n                  description: \"Edit functionality coming soon!\"\n                });\n              }}\n              onViewMessages={(listing) => {\n                // ProviderDashboard passes listing with claimedBy NGO data\n                if (listing.claimedBy) {\n                  handleContactProvider(listing, listing.claimedBy);\n                } else {\n                  toast({\n                    title: \"No NGO to message\",\n                    description: \"This listing hasn't been claimed by any NGO yet.\",\n                    variant: \"default\"\n                  });\n                }\n              }}\n            />\n          </div>\n        );\n      \n      default:\n        return (\n          <>\n            <HeroSection \n              onGetStarted={() => {\n                if (user?.userType) {\n                  handleUserTypeSelection(user.userType);\n                } else {\n                  // Scroll to user type selector\n                  document.getElementById('user-type-selector')?.scrollIntoView({ behavior: 'smooth' });\n                }\n              }}\n              userType={user?.userType || null}\n            />\n            {!user && (\n              <div id=\"user-type-selector\">\n                <UserTypeSelector onSelectType={handleUserTypeSelection} />\n              </div>\n            )}\n            \n            {/* Food Waste Impact Content */}\n            <FoodWasteAwareness />\n            \n            {/* Statistics and Features */}\n            <FeaturesSection />\n            \n            {/* Community Impact */}\n            <CommunityImpact />\n          </>\n        );\n    }\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation\n        user={user}\n        onAuthClick={() => setIsAuthModalOpen(true)}\n        onLogout={handleLogout}\n      />\n\n      {renderCurrentView()}\n\n      {/* Footer - only show on home view */}\n      {currentView === \"home\" && <Footer />}\n\n      {/* Chat Interface */}\n      {currentChatData && user && (\n        <ChatInterface\n          isOpen={isChatOpen}\n          onClose={() => {\n            setIsChatOpen(false);\n            setCurrentChatData(null);\n          }}\n          listing={currentChatData.listing}\n          otherUser={currentChatData.otherUser}\n          currentUserId={user.id}\n          userType={user.userType}\n        />\n      )}\n\n      {/* Auth Modal */}\n      <AuthModal\n        isOpen={isAuthModalOpen}\n        onClose={() => setIsAuthModalOpen(false)}\n        onLogin={handleLogin}\n        onRegister={handleRegister}\n      />\n    </div>\n  );\n}","size_bytes":9136},"ZeroWasteRescue/client/src/pages/NGOLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Eye, EyeOff, User, Mail, Phone, MapPin, Heart, ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function NGOLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showPassword, setShowPassword] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"login\");\n  \n  const [loginData, setLoginData] = useState({ email: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n    phone: \"\",\n    organizationType: \"\",\n    address: \"\",\n    description: \"\"\n  });\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Login failed\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"auth\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: data.user.isVerified \n          ? \"You're successfully logged in.\" \n          : \"Your account is pending verification by our admin team.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ ...data, userType: \"ngo\" }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Registration failed\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"auth\"] });\n      toast({\n        title: \"Registration Successful!\",\n        description: \"Your NGO application has been submitted for admin verification. You'll be notified once approved.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-green-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"flex items-center justify-center mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"absolute left-4 top-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"p-3 bg-blue-100 rounded-full\">\n                <Heart className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">NGO / Charity Portal</CardTitle>\n            <CardDescription>\n              Join our mission to reduce food waste and help communities\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Apply Now</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\" className=\"space-y-4 mt-6\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-email\">Email Address</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"login-email\"\n                        type=\"email\"\n                        value={loginData.email}\n                        onChange={(e) => setLoginData({...loginData, email: e.target.value})}\n                        placeholder=\"ngo@organization.org\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"login-password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({...loginData, password: e.target.value})}\n                        placeholder=\"Enter your password\"\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\" \n                    disabled={loginMutation.isPending}\n                  >\n                    {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\" className=\"space-y-4 mt-6 max-h-96 overflow-y-auto\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-name\">Organization Name*</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"register-name\"\n                        value={registerData.name}\n                        onChange={(e) => setRegisterData({...registerData, name: e.target.value})}\n                        placeholder=\"Your NGO or charity name\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\">Official Email*</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        value={registerData.email}\n                        onChange={(e) => setRegisterData({...registerData, email: e.target.value})}\n                        placeholder=\"contact@organization.org\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-phone\">Contact Number*</Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"register-phone\"\n                        value={registerData.phone}\n                        onChange={(e) => setRegisterData({...registerData, phone: e.target.value})}\n                        placeholder=\"+1 (555) 123-4567\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-type\">Organization Type*</Label>\n                    <Select value={registerData.organizationType} onValueChange={(value) => setRegisterData({...registerData, organizationType: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select organization type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"ngo\">NGO/Charity</SelectItem>\n                        <SelectItem value=\"food-bank\">Food Bank</SelectItem>\n                        <SelectItem value=\"community-group\">Community Group</SelectItem>\n                        <SelectItem value=\"religious-org\">Religious Organization</SelectItem>\n                        <SelectItem value=\"shelter\">Homeless Shelter</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-address\">Service Address*</Label>\n                    <div className=\"relative\">\n                      <MapPin className=\"absolute left-3 top-3 text-muted-foreground w-4 h-4\" />\n                      <Textarea\n                        id=\"register-address\"\n                        value={registerData.address}\n                        onChange={(e) => setRegisterData({...registerData, address: e.target.value})}\n                        placeholder=\"Address where you operate and can collect food\"\n                        className=\"pl-9 resize-none\"\n                        rows={2}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-description\">Mission Statement*</Label>\n                    <Textarea\n                      id=\"register-description\"\n                      value={registerData.description}\n                      onChange={(e) => setRegisterData({...registerData, description: e.target.value})}\n                      placeholder=\"Describe your organization's mission and how you help the community\"\n                      className=\"resize-none\"\n                      rows={3}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\">Create Password*</Label>\n                    <Input\n                      id=\"register-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData({...registerData, password: e.target.value})}\n                      placeholder=\"Create a secure password\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password*</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={registerData.confirmPassword}\n                      onChange={(e) => setRegisterData({...registerData, confirmPassword: e.target.value})}\n                      placeholder=\"Confirm your password\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                    <p className=\"text-sm text-blue-800\">\n                      <strong>Application Process:</strong> Your application will be reviewed by our admin team. \n                      You'll receive verification status within 1-2 business days.\n                    </p>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\" \n                    disabled={registerMutation.isPending}\n                  >\n                    {registerMutation.isPending ? \"Submitting Application...\" : \"Submit Application\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"text-center text-xs text-muted-foreground mt-4\">\n              By applying, you agree to our Terms of Service and Privacy Policy\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14507},"ZeroWasteRescue/client/src/pages/ProviderLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Eye, EyeOff, User, Mail, Phone, MapPin, Store, ArrowLeft } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function ProviderLogin() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showPassword, setShowPassword] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"login\");\n  \n  const [loginData, setLoginData] = useState({ email: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n    phone: \"\",\n    organizationType: \"\",\n    address: \"\",\n    description: \"\"\n  });\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Login failed\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"auth\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"You're successfully logged in and ready to share food.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Register mutation\n  const registerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ ...data, userType: \"provider\" }),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Registration failed\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"auth\"] });\n      toast({\n        title: \"Registration Successful!\",\n        description: \"Welcome to FoodBridge! You can now start listing your excess food.\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (registerData.password !== registerData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-orange-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"flex items-center justify-center mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" className=\"absolute left-4 top-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Home\n            </Button>\n          </Link>\n        </div>\n\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"p-3 bg-green-100 rounded-full\">\n                <Store className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">Food Provider Portal</CardTitle>\n            <CardDescription>\n              Share your excess food and make a difference\n            </CardDescription>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Join Now</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\" className=\"space-y-4 mt-6\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-email\">Email Address</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"login-email\"\n                        type=\"email\"\n                        value={loginData.email}\n                        onChange={(e) => setLoginData({...loginData, email: e.target.value})}\n                        placeholder=\"business@restaurant.com\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"login-password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"login-password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({...loginData, password: e.target.value})}\n                        placeholder=\"Enter your password\"\n                        required\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"absolute right-0 top-0 h-full px-3\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                      </Button>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-green-600 hover:bg-green-700\" \n                    disabled={loginMutation.isPending}\n                  >\n                    {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\" className=\"space-y-4 mt-6 max-h-96 overflow-y-auto\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-name\">Business/Organization Name*</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"register-name\"\n                        value={registerData.name}\n                        onChange={(e) => setRegisterData({...registerData, name: e.target.value})}\n                        placeholder=\"Your restaurant, hotel, or business name\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-email\">Business Email*</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        value={registerData.email}\n                        onChange={(e) => setRegisterData({...registerData, email: e.target.value})}\n                        placeholder=\"contact@business.com\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-phone\">Contact Number*</Label>\n                    <div className=\"relative\">\n                      <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        id=\"register-phone\"\n                        value={registerData.phone}\n                        onChange={(e) => setRegisterData({...registerData, phone: e.target.value})}\n                        placeholder=\"+1 (555) 123-4567\"\n                        className=\"pl-9\"\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-type\">Business Type*</Label>\n                    <Select value={registerData.organizationType} onValueChange={(value) => setRegisterData({...registerData, organizationType: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select business type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"restaurant\">Restaurant</SelectItem>\n                        <SelectItem value=\"hotel\">Hotel</SelectItem>\n                        <SelectItem value=\"hostel\">Hostel</SelectItem>\n                        <SelectItem value=\"catering\">Catering Service</SelectItem>\n                        <SelectItem value=\"bakery\">Bakery</SelectItem>\n                        <SelectItem value=\"grocery\">Grocery Store</SelectItem>\n                        <SelectItem value=\"cafe\">Cafe</SelectItem>\n                        <SelectItem value=\"other\">Other Food Business</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-address\">Business Address*</Label>\n                    <div className=\"relative\">\n                      <MapPin className=\"absolute left-3 top-3 text-muted-foreground w-4 h-4\" />\n                      <Textarea\n                        id=\"register-address\"\n                        value={registerData.address}\n                        onChange={(e) => setRegisterData({...registerData, address: e.target.value})}\n                        placeholder=\"Full business address for food pickup\"\n                        className=\"pl-9 resize-none\"\n                        rows={2}\n                        required\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-description\">About Your Business</Label>\n                    <Textarea\n                      id=\"register-description\"\n                      value={registerData.description}\n                      onChange={(e) => setRegisterData({...registerData, description: e.target.value})}\n                      placeholder=\"Tell us about your business and the types of food you typically have available\"\n                      className=\"resize-none\"\n                      rows={3}\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-password\">Create Password*</Label>\n                    <Input\n                      id=\"register-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={registerData.password}\n                      onChange={(e) => setRegisterData({...registerData, password: e.target.value})}\n                      placeholder=\"Create a secure password\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"register-confirm-password\">Confirm Password*</Label>\n                    <Input\n                      id=\"register-confirm-password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={registerData.confirmPassword}\n                      onChange={(e) => setRegisterData({...registerData, confirmPassword: e.target.value})}\n                      placeholder=\"Confirm your password\"\n                      required\n                    />\n                  </div>\n\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n                    <p className=\"text-sm text-green-800\">\n                      <strong>Get Started:</strong> Once registered, you can immediately start listing \n                      your excess food and connect with NGOs in your area.\n                    </p>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-green-600 hover:bg-green-700\" \n                    disabled={registerMutation.isPending}\n                  >\n                    {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"text-center text-xs text-muted-foreground mt-4\">\n              By joining, you agree to our Terms of Service and Privacy Policy\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14479},"ZeroWasteRescue/client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"ZeroWasteRescue/client/src/components/examples/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport AuthModal from \"../AuthModal\";\n\nexport default function AuthModalExample() {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <div className=\"p-4 min-h-screen bg-background\">\n      <Button onClick={() => setIsOpen(true)} data-testid=\"button-open-auth\">\n        Open Auth Modal\n      </Button>\n      \n      <AuthModal\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        onLogin={(data) => console.log(\"Login:\", data)}\n        onRegister={(data) => console.log(\"Register:\", data)}\n        initialTab=\"register\"\n      />\n    </div>\n  );\n}","size_bytes":659},"ZeroWasteRescue/client/src/components/examples/ChatInterface.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport ChatInterface from \"../ChatInterface\";\n\nexport default function ChatInterfaceExample() {\n  const [isChatOpen, setIsChatOpen] = useState(true);\n\n  return (\n    <div className=\"p-4 min-h-screen bg-background\">\n      <Button onClick={() => setIsChatOpen(true)} data-testid=\"button-open-chat\">\n        Open Chat\n      </Button>\n      \n      <ChatInterface\n        isOpen={isChatOpen}\n        onClose={() => setIsChatOpen(false)}\n        providerName=\"Grand Plaza Hotel\"\n        ngoName=\"Community Food Bank\"\n        userType=\"ngo\"\n        listingTitle=\"Fresh Vegetarian Meals\"\n      />\n    </div>\n  );\n}","size_bytes":689},"ZeroWasteRescue/client/src/components/examples/FoodListingCard.tsx":{"content":"import FoodListingCard, { type FoodListing } from \"../FoodListingCard\";\n\nconst mockListing: FoodListing = {\n  id: \"1\",\n  title: \"Fresh Vegetarian Meals\",\n  description: \"25 prepared vegetarian meals with rice, dal, and vegetables. Freshly prepared today.\",\n  quantity: \"25 meals\",\n  location: \"Downtown Hotel, 123 Main St\",\n  provider: \"Grand Plaza Hotel\",\n  timePosted: \"2 hours ago\", \n  expiresIn: \"4 hours\",\n  urgency: \"high\",\n  type: \"Prepared Meals\"\n};\n\nexport default function FoodListingCardExample() {\n  return (\n    <div className=\"p-4 max-w-md\">\n      <FoodListingCard\n        listing={mockListing}\n        onContact={(id) => console.log(`Contact clicked for listing ${id}`)}\n        onClaim={(id) => console.log(`Claim clicked for listing ${id}`)}\n        userType=\"ngo\"\n      />\n    </div>\n  );\n}","size_bytes":808},"ZeroWasteRescue/client/src/components/examples/FoodRegistrationForm.tsx":{"content":"import FoodRegistrationForm from \"../FoodRegistrationForm\";\n\nexport default function FoodRegistrationFormExample() {\n  return (\n    <div className=\"p-4 min-h-screen bg-background\">\n      <FoodRegistrationForm\n        onSubmit={(data) => console.log(\"Registration submitted:\", data)}\n        onCancel={() => console.log(\"Registration cancelled\")}\n      />\n    </div>\n  );\n}","size_bytes":372},"ZeroWasteRescue/client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from \"../HeroSection\";\n\nexport default function HeroSectionExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <HeroSection \n        onGetStarted={() => console.log(\"Get started clicked\")}\n        userType=\"provider\"\n      />\n    </div>\n  );\n}","size_bytes":288},"ZeroWasteRescue/client/src/components/examples/NGODashboard.tsx":{"content":"import NGODashboard from \"../NGODashboard\";\n\nexport default function NGODashboardExample() {\n  return (\n    <div className=\"p-6 min-h-screen bg-background\">\n      <NGODashboard\n        onContactProvider={(id) => console.log(`Contacting provider for listing ${id}`)}\n        onClaimListing={(id) => console.log(`Claiming listing ${id}`)}\n      />\n    </div>\n  );\n}","size_bytes":363},"ZeroWasteRescue/client/src/components/examples/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport Navigation from \"../Navigation\";\n\nexport default function NavigationExample() {\n  const [userType, setUserType] = useState<\"provider\" | \"ngo\" | null>(\"provider\");\n\n  return (\n    <Navigation \n      userType={userType}\n      onUserTypeChange={setUserType}\n      onAuthClick={() => console.log(\"Auth clicked\")}\n    />\n  );\n}","size_bytes":363},"ZeroWasteRescue/client/src/components/examples/UserTypeSelector.tsx":{"content":"import UserTypeSelector from \"../UserTypeSelector\";\n\nexport default function UserTypeSelectorExample() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <UserTypeSelector\n        onSelectType={(type) => console.log(`Selected type: ${type}`)}\n      />\n    </div>\n  );\n}","size_bytes":286},"ZeroWasteRescue/client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"ZeroWasteRescue/client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"ZeroWasteRescue/client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"ZeroWasteRescue/client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"ZeroWasteRescue/client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"ZeroWasteRescue/client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"ZeroWasteRescue/client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"ZeroWasteRescue/client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"ZeroWasteRescue/client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"ZeroWasteRescue/client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"ZeroWasteRescue/client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"ZeroWasteRescue/client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"ZeroWasteRescue/client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"ZeroWasteRescue/client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"ZeroWasteRescue/client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"ZeroWasteRescue/client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"ZeroWasteRescue/client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"ZeroWasteRescue/client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"ZeroWasteRescue/client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"ZeroWasteRescue/client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"ZeroWasteRescue/client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"ZeroWasteRescue/client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"ZeroWasteRescue/client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"ZeroWasteRescue/client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"ZeroWasteRescue/client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"ZeroWasteRescue/client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"ZeroWasteRescue/client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"ZeroWasteRescue/client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"ZeroWasteRescue/client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"ZeroWasteRescue/client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"ZeroWasteRescue/client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"ZeroWasteRescue/client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"ZeroWasteRescue/client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"ZeroWasteRescue/client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"ZeroWasteRescue/client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"ZeroWasteRescue/client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"ZeroWasteRescue/client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"ZeroWasteRescue/client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"ZeroWasteRescue/client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"ZeroWasteRescue/client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"ZeroWasteRescue/client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"ZeroWasteRescue/client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"ZeroWasteRescue/client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"ZeroWasteRescue/client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"ZeroWasteRescue/client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"ZeroWasteRescue/client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"ZeroWasteRescue/client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"ZeroWasteRescue/client/src/components/CommunityImpact.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Users, \n  Heart, \n  Leaf, \n  Building2, \n  Quote,\n  Star,\n  ArrowRight,\n  Globe\n} from \"lucide-react\";\n\nexport default function CommunityImpact() {\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-b from-blue-50 to-green-50\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">\n            Real Impact, Real Stories\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            See how ZeroWasteRescue is making a difference in communities across the globe\n          </p>\n        </div>\n\n        {/* Impact Stats */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 mb-16\">\n          <div className=\"text-center\">\n            <div className=\"bg-white rounded-full p-4 shadow-lg inline-flex items-center justify-center mb-4\">\n              <Users className=\"w-8 h-8 text-primary\" />\n            </div>\n            <div className=\"text-3xl font-bold text-gray-900\">50,000+</div>\n            <div className=\"text-gray-600\">People Fed</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"bg-white rounded-full p-4 shadow-lg inline-flex items-center justify-center mb-4\">\n              <Leaf className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <div className=\"text-3xl font-bold text-gray-900\">500</div>\n            <div className=\"text-gray-600\">Tons Saved</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"bg-white rounded-full p-4 shadow-lg inline-flex items-center justify-center mb-4\">\n              <Building2 className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <div className=\"text-3xl font-bold text-gray-900\">200+</div>\n            <div className=\"text-gray-600\">Partners</div>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"bg-white rounded-full p-4 shadow-lg inline-flex items-center justify-center mb-4\">\n              <Globe className=\"w-8 h-8 text-purple-600\" />\n            </div>\n            <div className=\"text-3xl font-bold text-gray-900\">25</div>\n            <div className=\"text-gray-600\">Cities</div>\n          </div>\n        </div>\n\n        {/* Success Stories */}\n        <div className=\"mb-16\">\n          <h3 className=\"text-3xl font-bold text-center text-gray-900 mb-12\">\n            Success Stories\n          </h3>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {/* Story 1 */}\n            <Card className=\"bg-white shadow-lg hover:shadow-xl transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <Quote className=\"w-8 h-8 text-primary\" />\n                  <div className=\"flex\">\n                    {[1,2,3,4,5].map(i => (\n                      <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                </div>\n                <CardTitle className=\"text-lg\">\"Transforming Our Community\"</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-4\">\n                  \"Through ZeroWasteRescue, our food bank now receives fresh meals daily from \n                  local restaurants. We've been able to serve 300% more families while reducing \n                  food costs by 80%.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"bg-blue-100 rounded-full p-2\">\n                    <Heart className=\"w-4 h-4 text-blue-600\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-sm\">Sarah Martinez</div>\n                    <div className=\"text-xs text-gray-500\">Director, City Food Bank</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Story 2 */}\n            <Card className=\"bg-white shadow-lg hover:shadow-xl transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <Quote className=\"w-8 h-8 text-green-600\" />\n                  <div className=\"flex\">\n                    {[1,2,3,4,5].map(i => (\n                      <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                </div>\n                <CardTitle className=\"text-lg\">\"Reducing Waste & Costs\"</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-4\">\n                  \"As a hotel chain, we were throwing away tons of perfectly good food. \n                  Now we rescue it all through the platform, saving $50,000 annually in \n                  disposal costs while helping our community.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"bg-green-100 rounded-full p-2\">\n                    <Building2 className=\"w-4 h-4 text-green-600\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-sm\">Michael Chen</div>\n                    <div className=\"text-xs text-gray-500\">GM, Grand Plaza Hotels</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Story 3 */}\n            <Card className=\"bg-white shadow-lg hover:shadow-xl transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <Quote className=\"w-8 h-8 text-purple-600\" />\n                  <div className=\"flex\">\n                    {[1,2,3,4,5].map(i => (\n                      <Star key={i} className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                </div>\n                <CardTitle className=\"text-lg\">\"Building Partnerships\"</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-4\">\n                  \"The platform connected us with amazing local businesses. These partnerships \n                  have grown beyond food rescue - we now collaborate on community events and \n                  volunteer programs.\"\n                </p>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"bg-purple-100 rounded-full p-2\">\n                    <Users className=\"w-4 h-4 text-purple-600\" />\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-sm\">Amanda Rodriguez</div>\n                    <div className=\"text-xs text-gray-500\">Volunteer Coordinator</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Environmental Impact */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 mb-16\">\n          <h3 className=\"text-3xl font-bold text-center text-gray-900 mb-8\">\n            Environmental Impact\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center\">\n              <div className=\"bg-green-100 rounded-full p-6 w-20 h-20 mx-auto mb-4 flex items-center justify-center\">\n                <Leaf className=\"w-10 h-10 text-green-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">2,500 Tons</div>\n              <div className=\"text-gray-600 font-medium mb-2\">CO2 Prevented</div>\n              <p className=\"text-sm text-gray-500\">\n                Equivalent to taking 500 cars off the road for a year\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"bg-blue-100 rounded-full p-6 w-20 h-20 mx-auto mb-4 flex items-center justify-center\">\n                <Globe className=\"w-10 h-10 text-blue-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">50M Gallons</div>\n              <div className=\"text-gray-600 font-medium mb-2\">Water Saved</div>\n              <p className=\"text-sm text-gray-500\">\n                Enough to supply 1,500 households for a year\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"bg-orange-100 rounded-full p-6 w-20 h-20 mx-auto mb-4 flex items-center justify-center\">\n                <Building2 className=\"w-10 h-10 text-orange-600\" />\n              </div>\n              <div className=\"text-3xl font-bold text-orange-600 mb-2\">1,000 Acres</div>\n              <div className=\"text-gray-600 font-medium mb-2\">Land Preserved</div>\n              <p className=\"text-sm text-gray-500\">\n                Agricultural land saved from unnecessary production\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center bg-gradient-to-r from-primary to-blue-600 rounded-2xl text-white p-8\">\n          <h3 className=\"text-3xl font-bold mb-4\">Ready to Make a Difference?</h3>\n          <p className=\"text-xl mb-8 opacity-90\">\n            Join thousands of organizations already making an impact in their communities\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button size=\"lg\" variant=\"secondary\" className=\"text-primary\">\n              Become a Food Provider\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white hover:text-primary\">\n              Join as an NGO\n              <ArrowRight className=\"w-5 h-5 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":10110},"ZeroWasteRescue/client/src/components/FeaturesSection.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Clock, \n  MapPin, \n  MessageCircle, \n  Shield, \n  TrendingUp, \n  Users,\n  Smartphone,\n  CheckCircle,\n  ArrowRight\n} from \"lucide-react\";\n\nexport default function FeaturesSection() {\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-white\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">\n            How ZeroWasteRescue Works\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n            Our platform makes food rescue simple, efficient, and impactful for everyone involved\n          </p>\n        </div>\n\n        {/* Process Steps */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-16\">\n          <div className=\"text-center\">\n            <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-2xl font-bold text-white\">1</span>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-3\">Register Surplus Food</h3>\n            <p className=\"text-gray-600\">\n              Food providers quickly list available surplus food with details about quantity, \n              location, and pickup requirements\n            </p>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-2xl font-bold text-white\">2</span>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-3\">NGOs Claim & Coordinate</h3>\n            <p className=\"text-gray-600\">\n              Verified NGOs browse available food, claim listings, and coordinate pickup \n              times directly with providers\n            </p>\n          </div>\n\n          <div className=\"text-center\">\n            <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-2xl font-bold text-white\">3</span>\n            </div>\n            <h3 className=\"text-xl font-semibold mb-3\">Track & Distribute</h3>\n            <p className=\"text-gray-600\">\n              Real-time status tracking ensures smooth coordination while rescued food \n              reaches communities in need\n            </p>\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-blue-100 p-2 rounded-lg\">\n                  <Clock className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Real-Time Coordination</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">\n                Live status updates keep everyone informed throughout the rescue process, \n                from listing to delivery completion.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-green-100 p-2 rounded-lg\">\n                  <MapPin className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Location-Based Matching</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">\n                Smart location filtering connects nearby food providers with local NGOs \n                for efficient and timely pickup coordination.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-purple-100 p-2 rounded-lg\">\n                  <MessageCircle className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Direct Communication</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">\n                Built-in messaging system enables direct communication between providers \n                and NGOs for seamless coordination.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-red-100 p-2 rounded-lg\">\n                  <Shield className=\"w-6 h-6 text-red-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Verified Organizations</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">\n                All NGOs undergo verification to ensure food reaches legitimate \n                organizations serving communities in need.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-orange-100 p-2 rounded-lg\">\n                  <TrendingUp className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Impact Tracking</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">\n                Comprehensive analytics help organizations track their social and \n                environmental impact over time.\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-cyan-100 p-2 rounded-lg\">\n                  <Smartphone className=\"w-6 h-6 text-cyan-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Mobile-Friendly</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-gray-600\">\n                Responsive design ensures the platform works seamlessly on any device, \n                making food rescue accessible anywhere.\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Benefits Section */}\n        <div className=\"bg-gray-50 rounded-2xl p-8\">\n          <h3 className=\"text-3xl font-bold text-center text-gray-900 mb-8\">\n            Benefits for Everyone\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12\">\n            {/* For Providers */}\n            <div>\n              <h4 className=\"text-2xl font-semibold text-gray-900 mb-6 flex items-center gap-3\">\n                <div className=\"bg-green-100 p-2 rounded-lg\">\n                  <Users className=\"w-6 h-6 text-green-600\" />\n                </div>\n                For Food Providers\n              </h4>\n              <ul className=\"space-y-3\">\n                {[\n                  \"Reduce waste disposal costs\",\n                  \"Gain valuable tax deductions\", \n                  \"Enhance corporate social responsibility\",\n                  \"Build community partnerships\",\n                  \"Easy-to-use registration process\",\n                  \"Real-time pickup coordination\"\n                ].map((benefit, index) => (\n                  <li key={index} className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{benefit}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* For NGOs */}\n            <div>\n              <h4 className=\"text-2xl font-semibold text-gray-900 mb-6 flex items-center gap-3\">\n                <div className=\"bg-blue-100 p-2 rounded-lg\">\n                  <Users className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                For NGOs & Charities\n              </h4>\n              <ul className=\"space-y-3\">\n                {[\n                  \"Access to fresh, quality food donations\",\n                  \"Efficient food sourcing and logistics\",\n                  \"Serve more community members\",\n                  \"Build relationships with local businesses\", \n                  \"Track and report social impact\",\n                  \"Professional verification system\"\n                ].map((benefit, index) => (\n                  <li key={index} className=\"flex items-center gap-3\">\n                    <CheckCircle className=\"w-5 h-5 text-blue-500 flex-shrink-0\" />\n                    <span className=\"text-gray-700\">{benefit}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":9391},"ZeroWasteRescue/client/src/components/FoodWasteAwareness.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trash2, Globe, Users, DollarSign, Heart, Leaf } from \"lucide-react\";\n\nexport default function FoodWasteAwareness() {\n  return (\n    <section className=\"py-16 px-4 sm:px-6 lg:px-8 bg-gradient-to-b from-green-50 to-blue-50\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">\n            The Global Food Waste Crisis\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed\">\n            Every year, approximately <span className=\"font-bold text-red-600\">1.3 billion tons</span> of food \n            is wasted globally while <span className=\"font-bold text-orange-600\">828 million people</span> go hungry. \n            Together, we can change this.\n          </p>\n        </div>\n\n        {/* Statistics Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n          <Card className=\"bg-white shadow-lg hover:shadow-xl transition-shadow border-l-4 border-l-red-500\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-red-100 p-3 rounded-full\">\n                  <Trash2 className=\"w-8 h-8 text-red-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Food Waste Impact</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"text-3xl font-bold text-red-600\">40%</div>\n                <p className=\"text-gray-600\">\n                  of all food produced globally is wasted, enough to feed 3 billion people\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-lg hover:shadow-xl transition-shadow border-l-4 border-l-blue-500\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-blue-100 p-3 rounded-full\">\n                  <Globe className=\"w-8 h-8 text-blue-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Environmental Cost</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"text-3xl font-bold text-blue-600\">8%</div>\n                <p className=\"text-gray-600\">\n                  of global greenhouse gas emissions come from food waste\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white shadow-lg hover:shadow-xl transition-shadow border-l-4 border-l-green-500\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-green-100 p-3 rounded-full\">\n                  <DollarSign className=\"w-8 h-8 text-green-600\" />\n                </div>\n                <CardTitle className=\"text-lg\">Economic Loss</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"text-3xl font-bold text-green-600\">$1T</div>\n                <p className=\"text-gray-600\">\n                  worth of food is wasted annually worldwide\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Why It Matters */}\n        <div className=\"bg-white rounded-2xl shadow-xl p-8 mb-16\">\n          <h3 className=\"text-3xl font-bold text-center text-gray-900 mb-8\">\n            Why Every Meal Matters\n          </h3>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"bg-orange-100 p-3 rounded-full flex-shrink-0\">\n                  <Users className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div>\n                  <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Human Impact</h4>\n                  <p className=\"text-gray-600\">\n                    While tons of perfectly good food gets thrown away, millions of people struggle with hunger. \n                    Food rescue directly addresses this injustice by redirecting surplus to those who need it most.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"bg-green-100 p-3 rounded-full flex-shrink-0\">\n                  <Leaf className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Environmental Protection</h4>\n                  <p className=\"text-gray-600\">\n                    Food waste in landfills produces methane, a greenhouse gas 25 times more potent than CO2. \n                    By rescuing food, we reduce environmental damage and conserve precious resources like water and land.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"bg-blue-100 p-3 rounded-full flex-shrink-0\">\n                  <DollarSign className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div>\n                  <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Economic Benefits</h4>\n                  <p className=\"text-gray-600\">\n                    Food providers save money on waste disposal costs while gaining valuable tax deductions. \n                    Communities benefit from increased food security and reduced social services burden.\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"bg-purple-100 p-3 rounded-full flex-shrink-0\">\n                  <Heart className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div>\n                  <h4 className=\"text-xl font-semibold text-gray-900 mb-2\">Community Building</h4>\n                  <p className=\"text-gray-600\">\n                    Food rescue creates connections between businesses and communities, fostering partnerships \n                    that strengthen social bonds and create lasting positive change.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center bg-gradient-to-r from-primary to-green-600 rounded-2xl text-white p-8\">\n          <h3 className=\"text-3xl font-bold mb-4\">Every Action Counts</h3>\n          <p className=\"text-xl mb-6 opacity-90\">\n            When we rescue food, we're not just preventing waste – we're feeding families, \n            protecting our planet, and building stronger communities.\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-center\">\n            <div>\n              <div className=\"text-3xl font-bold mb-2\">12,000+</div>\n              <div className=\"text-lg opacity-90\">Meals Rescued</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold mb-2\">150+</div>\n              <div className=\"text-lg opacity-90\">Partner Organizations</div>\n            </div>\n            <div>\n              <div className=\"text-3xl font-bold mb-2\">25 Tons</div>\n              <div className=\"text-lg opacity-90\">CO2 Prevented</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7844},"ZeroWasteRescue/client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Heart, Mail, Phone, MapPin, Facebook, Twitter, Instagram, Linkedin } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-gray-900 text-white py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          {/* Brand Section */}\n          <div className=\"md:col-span-1\">\n            <h3 className=\"text-2xl font-bold text-primary mb-4\">ZeroWasteRescue</h3>\n            <p className=\"text-gray-300 mb-4\">\n              Bridging the gap between food surplus and community need. Together, we can reduce waste and feed communities.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Facebook className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Instagram className=\"w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-gray-400 hover:text-primary transition-colors\">\n                <Linkedin className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Home\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/about\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  About Us\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/how-it-works\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  How It Works\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/impact\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Our Impact\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* For Organizations */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">For Organizations</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/provider-login\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Food Providers\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/ngo-login\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  NGOs & Charities\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/partnerships\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Partnerships\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/resources\" className=\"text-gray-300 hover:text-primary transition-colors\">\n                  Resources\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Contact Us</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-gray-300\">contact@zerowasterescue.org</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-gray-300\">+1 (555) 123-4567</span>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <MapPin className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-gray-300\">123 Community Street, City, State 12345</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Section */}\n        <div className=\"border-t border-gray-800 pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center gap-2 mb-4 md:mb-0\">\n              <span className=\"text-gray-300\">Made with</span>\n              <Heart className=\"w-4 h-4 text-red-500 fill-current\" />\n              <span className=\"text-gray-300\">for a sustainable future</span>\n            </div>\n            <div className=\"flex flex-col md:flex-row gap-4 text-gray-400 text-sm\">\n              <a href=\"/privacy\" className=\"hover:text-primary transition-colors\">Privacy Policy</a>\n              <a href=\"/terms\" className=\"hover:text-primary transition-colors\">Terms of Service</a>\n              <span>&copy; 2024 ZeroWasteRescue. All rights reserved.</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":5174}},"version":1}